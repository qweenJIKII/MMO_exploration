/**
 * Cloud Save API
 * # Introduction This is the API specification for the Unity Cloud Save service that allows player or custom non-player state to be accessed and persisted from a game client. The Player State API allows data to be stored against a specific player ID. Access using client authentication is limited to the specified player for both data reads and writes. The Game State API allows data to be stored against a custom ID provided by the user. All players are able to read the data from the custom ID using client authentication, but write operations are limited to Service Account authentication. To use this API, you must first enable it through the Unity Gaming Services dashboard.  # General Information Cloud Save Data are small JSON serializable data, stored as key/value pairs. The maximum size for player or custom data is 5 MB across all key/value pairs for that player. A player can have data in a single slot that is up to 5 MB in size, or use many slots that equal to less than 5 MB in total size. Limits: - Maximum 255 characters per slot name - Maximum 2000 data slots per player or custom ID - Maximum 5 MB in size per player or custom ID across all slots  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 600 requests per minute on a per-player basis. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client\'s retry logic. The value is the number of seconds until a request for the given player will be accepted.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import type { RequestArgs } from "./base";
import { BaseAPI } from "./base";
/**
 * Response type for an attempted Data Item sent to the Cloud Save service.
 * @export
 * @interface AttemptedItem
 */
export interface AttemptedItem {
    /**
     * Item key
     * @type {string}
     * @memberof AttemptedItem
     */
    key: string;
    /**
     * Any JSON serializable structure with a maximum size of 5 MB.
     * @type {object}
     * @memberof AttemptedItem
     */
    value: object;
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof AttemptedItem
     */
    writeLock: string;
}
/**
 *
 * @export
 * @interface BaseErrorResponse
 */
export interface BaseErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof BaseErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof BaseErrorResponse
     */
    title?: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof BaseErrorResponse
     */
    status?: number;
    /**
     * Service specific error code
     * @type {number}
     * @memberof BaseErrorResponse
     */
    code?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof BaseErrorResponse
     */
    detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof BaseErrorResponse
     */
    instance?: string | null;
}
/**
 * Referenced from - https://tools.ietf.org/html/rfc7807#page-3 Consumers MUST use the \'type\' string as the primary identifier for the problem type; the \'title\' string is advisory and included only for users who are not aware of the semantics of the URI and do not have the ability to discover them (e.g., offline log analysis). Consumers SHOULD NOT automatically dereference the type URI. The \"status\" member, if present, is only advisory; it conveys the HTTP status code used for the convenience of the consumer. Generators MUST use the same status code in the actual HTTP response, to assure that generic HTTP software that does not understand this format still behaves correctly.  See Section 5 for further caveats regarding its use. Consumers can use the status member to determine what the original status code used by the generator was, in cases where it has been changed (e.g., by an intermediary or cache), and when message bodies persist without HTTP information.  Generic HTTP software will still use the HTTP status code. The \"detail\" member, if present, ought to focus on helping the client correct the problem, rather than giving debugging information.
 * @export
 * @interface BasicErrorResponse
 */
export interface BasicErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof BasicErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof BasicErrorResponse
     */
    title?: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof BasicErrorResponse
     */
    status?: number;
    /**
     * Service specific error code
     * @type {number}
     * @memberof BasicErrorResponse
     */
    code?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof BasicErrorResponse
     */
    detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof BasicErrorResponse
     */
    instance?: string | null;
    /**
     * Machine readable service specific errors.
     * @type {Array<object>}
     * @memberof BasicErrorResponse
     */
    details?: Array<object>;
}
/**
 *
 * @export
 * @interface BasicErrorResponseAllOf
 */
export interface BasicErrorResponseAllOf {
    /**
     * Machine readable service specific errors.
     * @type {Array<object>}
     * @memberof BasicErrorResponseAllOf
     */
    details?: Array<object>;
}
/**
 * Single error in the Batch Basic Error Response.
 * @export
 * @interface BatchBasicErrorBody
 */
export interface BatchBasicErrorBody {
    /**
     *
     * @type {Array<string>}
     * @memberof BatchBasicErrorBody
     */
    messages: Array<string>;
    /**
     *
     * @type {string}
     * @memberof BatchBasicErrorBody
     */
    key: string;
}
/**
 * Batch basic error response when one or more values provided from the client fails some condition
 * @export
 * @interface BatchBasicErrorResponse
 */
export interface BatchBasicErrorResponse {
    /**
     *
     * @type {string}
     * @memberof BatchBasicErrorResponse
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof BatchBasicErrorResponse
     */
    title: string;
    /**
     *
     * @type {number}
     * @memberof BatchBasicErrorResponse
     */
    status: number;
    /**
     *
     * @type {number}
     * @memberof BatchBasicErrorResponse
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof BatchBasicErrorResponse
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof BatchBasicErrorResponse
     */
    instance?: string;
    /**
     *
     * @type {Array<BatchBasicErrorBody>}
     * @memberof BatchBasicErrorResponse
     */
    errors: Array<BatchBasicErrorBody>;
}
/**
 * An error response sent back upon a batch update containing a resource conflict. All Data Items within the request should be considered unprocessed. The error response data[] property contains the Data Items that conflicted.
 * @export
 * @interface BatchConflictErrorResponse
 */
export interface BatchConflictErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof BatchConflictErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof BatchConflictErrorResponse
     */
    title: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof BatchConflictErrorResponse
     */
    status: number;
    /**
     * Service specific error code
     * @type {number}
     * @memberof BatchConflictErrorResponse
     */
    code: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof BatchConflictErrorResponse
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof BatchConflictErrorResponse
     */
    instance?: string | null;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {Array<ConflictErrorResponseData>}
     * @memberof BatchConflictErrorResponse
     */
    data: Array<ConflictErrorResponseData>;
}
/**
 *
 * @export
 * @interface BatchConflictErrorResponseAllOf
 */
export interface BatchConflictErrorResponseAllOf {
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {Array<ConflictErrorResponseData>}
     * @memberof BatchConflictErrorResponseAllOf
     */
    data?: Array<ConflictErrorResponseData>;
}
/**
 * Single error in the Batch Validation Error Response.
 * @export
 * @interface BatchValidationErrorBody
 */
export interface BatchValidationErrorBody {
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorBody
     */
    field: string;
    /**
     *
     * @type {Array<string>}
     * @memberof BatchValidationErrorBody
     */
    messages: Array<string>;
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorBody
     */
    key: string;
}
/**
 * Batch validation error response when one or more values provided from the client does not pass validation on server
 * @export
 * @interface BatchValidationErrorResponse
 */
export interface BatchValidationErrorResponse {
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorResponse
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorResponse
     */
    title: string;
    /**
     *
     * @type {number}
     * @memberof BatchValidationErrorResponse
     */
    status: number;
    /**
     *
     * @type {number}
     * @memberof BatchValidationErrorResponse
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorResponse
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof BatchValidationErrorResponse
     */
    instance?: string;
    /**
     *
     * @type {Array<BatchValidationErrorBody>}
     * @memberof BatchValidationErrorResponse
     */
    errors: Array<BatchValidationErrorBody>;
}
/**
 * An error sent back upon resource conflict.
 * @export
 * @interface ConflictErrorResponse
 */
export interface ConflictErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof ConflictErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof ConflictErrorResponse
     */
    title: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof ConflictErrorResponse
     */
    status: number;
    /**
     * Service specific error code
     * @type {number}
     * @memberof ConflictErrorResponse
     */
    code: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ConflictErrorResponse
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ConflictErrorResponse
     */
    instance?: string | null;
    /**
     *
     * @type {ConflictErrorResponseData}
     * @memberof ConflictErrorResponse
     */
    data: ConflictErrorResponseData;
}
/**
 *
 * @export
 * @interface ConflictErrorResponseAllOf
 */
export interface ConflictErrorResponseAllOf {
    /**
     *
     * @type {ConflictErrorResponseData}
     * @memberof ConflictErrorResponseAllOf
     */
    data?: ConflictErrorResponseData;
}
/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @export
 * @interface ConflictErrorResponseData
 */
export interface ConflictErrorResponseData {
    /**
     *
     * @type {AttemptedItem}
     * @memberof ConflictErrorResponseData
     */
    attempted?: AttemptedItem;
    /**
     *
     * @type {Item}
     * @memberof ConflictErrorResponseData
     */
    existing?: Item;
}
/**
 * An error sent back upon resource conflict.
 * @export
 * @interface DeleteConflictErrorResponse
 */
export interface DeleteConflictErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof DeleteConflictErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof DeleteConflictErrorResponse
     */
    title: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof DeleteConflictErrorResponse
     */
    status: number;
    /**
     * Service specific error code
     * @type {number}
     * @memberof DeleteConflictErrorResponse
     */
    code: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof DeleteConflictErrorResponse
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof DeleteConflictErrorResponse
     */
    instance?: string | null;
    /**
     *
     * @type {DeleteConflictErrorResponseAllOfData}
     * @memberof DeleteConflictErrorResponse
     */
    data: DeleteConflictErrorResponseAllOfData;
}
/**
 *
 * @export
 * @interface DeleteConflictErrorResponseAllOf
 */
export interface DeleteConflictErrorResponseAllOf {
    /**
     *
     * @type {DeleteConflictErrorResponseAllOfData}
     * @memberof DeleteConflictErrorResponseAllOf
     */
    data?: DeleteConflictErrorResponseAllOfData;
}
/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @export
 * @interface DeleteConflictErrorResponseAllOfData
 */
export interface DeleteConflictErrorResponseAllOfData {
    /**
     *
     * @type {string}
     * @memberof DeleteConflictErrorResponseAllOfData
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof DeleteConflictErrorResponseAllOfData
     */
    attemptedWriteLock?: string;
    /**
     *
     * @type {string}
     * @memberof DeleteConflictErrorResponseAllOfData
     */
    existingWriteLock?: string;
}
/**
 * @type GetItems400Response
 * @export
 */
export type GetItems400Response = ({
    type: "problems/basic";
} & BasicErrorResponse) | ({
    type: "problems/validation";
} & ValidationErrorResponse);
/**
 *
 * @export
 * @interface GetItemsResponse
 */
export interface GetItemsResponse {
    /**
     * Data values for all keys, ordered aplhabetically in pages of 20.
     * @type {Array<Item>}
     * @memberof GetItemsResponse
     */
    results: Array<Item>;
    /**
     *
     * @type {GetItemsResponseLinks}
     * @memberof GetItemsResponse
     */
    links: GetItemsResponseLinks;
}
/**
 *
 * @export
 * @interface GetItemsResponseLinks
 */
export interface GetItemsResponseLinks {
    /**
     * Contains the URL path for requesting the next page of results. This value is null when there are no pages remaining.
     * @type {string}
     * @memberof GetItemsResponseLinks
     */
    next: string | null;
}
/**
 *
 * @export
 * @interface GetKeysResponse
 */
export interface GetKeysResponse {
    /**
     * A paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @type {Array<KeyMetadata>}
     * @memberof GetKeysResponse
     */
    results: Array<KeyMetadata>;
    /**
     *
     * @type {GetItemsResponseLinks}
     * @memberof GetKeysResponse
     */
    links: GetItemsResponseLinks;
}
/**
 * Response type for a Data Item stored in the Cloud Save service.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Item key
     * @type {string}
     * @memberof Item
     */
    key: string;
    /**
     * Any JSON serializable structure with a maximum size of 5 MB.
     * @type {object}
     * @memberof Item
     */
    value: object;
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof Item
     */
    writeLock: string;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof Item
     */
    modified: ModifiedMetadata;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof Item
     */
    created: ModifiedMetadata;
}
/**
 * Response type Key with metadata for an individual data item stored in the Cloud Save service.
 * @export
 * @interface KeyMetadata
 */
export interface KeyMetadata {
    /**
     * Item key
     * @type {string}
     * @memberof KeyMetadata
     */
    key: string;
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof KeyMetadata
     */
    writeLock: string;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof KeyMetadata
     */
    modified: ModifiedMetadata;
}
/**
 * Timestamp for when the object was modified.
 * @export
 * @interface ModifiedMetadata
 */
export interface ModifiedMetadata {
    /**
     * Date time in ISO 8601 format. Null if there is no associated value.
     * @type {string}
     * @memberof ModifiedMetadata
     */
    date: string | null;
}
/**
 * @type SetItemBatch400Response
 * @export
 */
export type SetItemBatch400Response = ({
    type: "problems/basic";
} & BasicErrorResponse) | ({
    type: "problems/batch-basic";
} & BatchBasicErrorResponse) | ({
    type: "problems/batch-validation";
} & BatchValidationErrorResponse) | ({
    type: "problems/validation";
} & ValidationErrorResponse);
/**
 *
 * @export
 * @interface SetItemBatchBody
 */
export interface SetItemBatchBody {
    /**
     *
     * @type {Array<SetItemBody>}
     * @memberof SetItemBatchBody
     */
    data?: Array<SetItemBody>;
}
/**
 *
 * @export
 * @interface SetItemBatchResponse
 */
export interface SetItemBatchResponse {
    /**
     *
     * @type {Array<SetItemBatchResponseResultsInner>}
     * @memberof SetItemBatchResponse
     */
    results?: Array<SetItemBatchResponseResultsInner>;
}
/**
 *
 * @export
 * @interface SetItemBatchResponseResultsInner
 */
export interface SetItemBatchResponseResultsInner {
    /**
     * Item key
     * @type {string}
     * @memberof SetItemBatchResponseResultsInner
     */
    key: string;
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof SetItemBatchResponseResultsInner
     */
    writeLock: string;
}
/**
 * Request type for a Data Item to store in the Cloud Save service.
 * @export
 * @interface SetItemBody
 */
export interface SetItemBody {
    /**
     * Item key
     * @type {string}
     * @memberof SetItemBody
     */
    key: string;
    /**
     * Any JSON serializable structure with a maximum size of 5 MB.
     * @type {object}
     * @memberof SetItemBody
     */
    value: object;
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof SetItemBody
     */
    writeLock?: string;
}
/**
 * Newly generated writeLock for the item.
 * @export
 * @interface SetItemResponse
 */
export interface SetItemResponse {
    /**
     * Enforces conflict checking when updating an existing data item. This field should be omitted when creating a new data item. When updating an existing item, omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @type {string}
     * @memberof SetItemResponse
     */
    writeLock: string;
}
/**
 * Single error in the Validation Error Response.
 * @export
 * @interface ValidationErrorBody
 */
export interface ValidationErrorBody {
    /**
     *
     * @type {string}
     * @memberof ValidationErrorBody
     */
    field: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ValidationErrorBody
     */
    messages: Array<string>;
}
/**
 * Validation error response when a value provided from the client does not pass validation on server.
 * @export
 * @interface ValidationErrorResponse
 */
export interface ValidationErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    title: string;
    /**
     *
     * @type {number}
     * @memberof ValidationErrorResponse
     */
    status: number;
    /**
     *
     * @type {number}
     * @memberof ValidationErrorResponse
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    instance?: string;
    /**
     *
     * @type {Array<ValidationErrorBody>}
     * @memberof ValidationErrorResponse
     */
    errors: Array<ValidationErrorBody>;
}
/**
 * DataApi - axios parameter creator
 * @export
 */
export declare const DataApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a data item by the specified key for the specified custom ID.
     * @summary Delete Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItem: (key: string, projectId: string, customId: string, writeLock?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes all data associated with a given custom ID.
     * @summary Delete Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItems: (projectId: string, customId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a data item by the specified key for the given player.
     * @summary Delete Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem: (key: string, projectId: string, playerId: string, writeLock?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes all data associated with a given player.
     * @summary Delete Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItems: (projectId: string, playerId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomItems: (projectId: string, customId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
     * @summary Get Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomKeys: (projectId: string, customId: string, after?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems: (projectId: string, playerId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeys: (projectId: string, playerId: string, after?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItem: (projectId: string, customId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all slots for the custom ID. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItemBatch: (projectId: string, customId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItem: (projectId: string, playerId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItemBatch: (projectId: string, playerId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DataApi - functional programming interface
 * @export
 */
export declare const DataApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a data item by the specified key for the specified custom ID.
     * @summary Delete Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItem(key: string, projectId: string, customId: string, writeLock?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes all data associated with a given custom ID.
     * @summary Delete Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItems(projectId: string, customId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes a data item by the specified key for the given player.
     * @summary Delete Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(key: string, projectId: string, playerId: string, writeLock?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes all data associated with a given player.
     * @summary Delete Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItems(projectId: string, playerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomItems(projectId: string, customId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItemsResponse>>;
    /**
     * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
     * @summary Get Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomKeys(projectId: string, customId: string, after?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeysResponse>>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(projectId: string, playerId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItemsResponse>>;
    /**
     * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeys(projectId: string, playerId: string, after?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeysResponse>>;
    /**
     * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItem(projectId: string, customId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetItemResponse>>;
    /**
     * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all slots for the custom ID. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItemBatch(projectId: string, customId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetItemBatchResponse>>;
    /**
     * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItem(projectId: string, playerId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetItemResponse>>;
    /**
     * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItemBatch(projectId: string, playerId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetItemBatchResponse>>;
};
/**
 * DataApi - factory interface
 * @export
 */
export declare const DataApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a data item by the specified key for the specified custom ID.
     * @summary Delete Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItem(key: string, projectId: string, customId: string, writeLock?: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes all data associated with a given custom ID.
     * @summary Delete Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomItems(projectId: string, customId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes a data item by the specified key for the given player.
     * @summary Delete Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(key: string, projectId: string, playerId: string, writeLock?: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes all data associated with a given player.
     * @summary Delete Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItems(projectId: string, playerId: string, options?: any): AxiosPromise<void>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomItems(projectId: string, customId: string, keys?: Array<string>, after?: string, options?: any): AxiosPromise<GetItemsResponse>;
    /**
     * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
     * @summary Get Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomKeys(projectId: string, customId: string, after?: string, options?: any): AxiosPromise<GetKeysResponse>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItems(projectId: string, playerId: string, keys?: Array<string>, after?: string, options?: any): AxiosPromise<GetItemsResponse>;
    /**
     * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeys(projectId: string, playerId: string, after?: string, options?: any): AxiosPromise<GetKeysResponse>;
    /**
     * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItem(projectId: string, customId: string, setItemBody?: SetItemBody, options?: any): AxiosPromise<SetItemResponse>;
    /**
     * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all slots for the custom ID. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCustomItemBatch(projectId: string, customId: string, setItemBatchBody?: SetItemBatchBody, options?: any): AxiosPromise<SetItemBatchResponse>;
    /**
     * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItem(projectId: string, playerId: string, setItemBody?: SetItemBody, options?: any): AxiosPromise<SetItemResponse>;
    /**
     * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setItemBatch(projectId: string, playerId: string, setItemBatchBody?: SetItemBatchBody, options?: any): AxiosPromise<SetItemBatchResponse>;
};
/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export declare class DataApi extends BaseAPI {
    /**
     * Deletes a data item by the specified key for the specified custom ID.
     * @summary Delete Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    deleteCustomItem(key: string, projectId: string, customId: string, writeLock?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes all data associated with a given custom ID.
     * @summary Delete Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    deleteCustomItems(projectId: string, customId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes a data item by the specified key for the given player.
     * @summary Delete Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    deleteItem(key: string, projectId: string, playerId: string, writeLock?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes all data associated with a given player.
     * @summary Delete Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    deleteItems(projectId: string, playerId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    getCustomItems(projectId: string, customId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetItemsResponse, any>>;
    /**
     * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
     * @summary Get Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    getCustomKeys(projectId: string, customId: string, after?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetKeysResponse, any>>;
    /**
     * Retrieves save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    getItems(projectId: string, playerId: string, keys?: Array<string>, after?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetItemsResponse, any>>;
    /**
     * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    getKeys(projectId: string, playerId: string, after?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetKeysResponse, any>>;
    /**
     * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    setCustomItem(projectId: string, customId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetItemResponse, any>>;
    /**
     * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all slots for the custom ID. The entire save state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    setCustomItemBatch(projectId: string, customId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetItemBatchResponse, any>>;
    /**
     * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all slots. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    setItem(projectId: string, playerId: string, setItemBody?: SetItemBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetItemResponse, any>>;
    /**
     * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire save state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    setItemBatch(projectId: string, playerId: string, setItemBatchBody?: SetItemBatchBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetItemBatchResponse, any>>;
}
