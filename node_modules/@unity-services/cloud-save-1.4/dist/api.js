"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Save API
 * # Introduction This is the API specification for the Unity Cloud Save service that allows player or custom non-player state to be accessed and persisted from a game client. The Player State API allows data to be stored against a specific player ID. Access using client authentication is limited to the specified player for both data reads and writes. The Game State API allows data to be stored against a custom ID provided by the user. All players are able to read the data from the custom ID using client authentication, but write operations are limited to Service Account authentication. To use this API, you must first enable it through the Unity Gaming Services dashboard.  # General Information **Cloud Save Data** is for storing small blobs of JSON serializable data, stored as key/value pairs. It can store data against a player ID (referred to as Player State) or a custom ID (referred to as Game State). The custom ID is a string that can be used to store data against a non-player entity, but the client API is restricted to read-only access. In addition to the default access levels for player and game state, data can be stored in public player state, protected player state, or private game state. The access details are as follows: - Default Player State: Player-writable and player-readable, by the player the data corresponds to - Public Player State: Player-writable by the player the data corresponds to, and readable by any player (e.g. public player profile data) - Protected Player State: Server-writable only, and player-readable by the player the data corresponds to - Default Game State: Server-writable only, player-readable by any player - Private Game State: Server-writable and server-readable only  The maximum size for player or custom data is 5 MB across all key/value pairs for that player and access class. A player can have data in a single slot that is up to 5 MB in size, or use many slots that equal to less than 5 MB in total size. Limits: - Maximum 255 characters per slot name - Maximum 2000 data slots per player or custom ID per access class - Maximum 5 MB in size per player or custom ID per access class across all slots  **Cloud Save Files** is for storing data files (binary, JSON, text, CSV, etc.) against keys. The maximum size for player data is 1 GB across all keys for that player. A player can have data in a single file that is up to 1 GB in size, or use many files that equal to less than 1 GB in total size. Limits: - Maximum 255 characters per file name - Maximum 200 files per player - Maximum 1 GB in size per player across all files  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 600 requests per minute on a per-player basis. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client\'s retry logic. The value is the number of seconds until a request for the given player will be accepted.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesApi = exports.FilesApiFactory = exports.FilesApiFp = exports.FilesApiAxiosParamCreator = exports.DataApi = exports.DataApiFactory = exports.DataApiFp = exports.DataApiAxiosParamCreator = exports.FieldFilterOpEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.FieldFilterOpEnum = {
    Eq: "EQ",
    Ne: "NE",
    Lt: "LT",
    Le: "LE",
    Gt: "GT",
    Ge: "GE",
};
/**
 * DataApi - axios parameter creator
 * @export
 */
var DataApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes a data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItem: function (key, projectId, customId, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deleteCustomItem", "key", key);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteCustomItem", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteCustomItem", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/items/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all default access level data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItems: function (projectId, customId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteCustomItems", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteCustomItems", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a data item by the specified key for the given player.
         * @summary Delete Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (key, projectId, playerId, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deleteItem", "key", key);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/items/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all default access level data associated with a given player.
         * @summary Delete Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (projectId, playerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a private data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItem: function (key, projectId, customId, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deletePrivateCustomItem", "key", key);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePrivateCustomItem", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePrivateCustomItem", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/items/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all private data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItems: function (projectId, customId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePrivateCustomItems", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePrivateCustomItems", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a protected data item by the specified key for the given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItem: function (key, projectId, playerId, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deleteProtectedItem", "key", key);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteProtectedItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteProtectedItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/items/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all protected data associated with a given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItems: function (projectId, playerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteProtectedItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteProtectedItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes a public data item by the specified key for the given player.
         * @summary Delete Public Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItem: function (key, projectId, playerId, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deletePublicItem", "key", key);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePublicItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePublicItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/items/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all public data associated with a given player.
         * @summary Delete Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItems: function (projectId, playerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePublicItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deletePublicItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomItems: function (projectId, customId, keys, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getCustomItems", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("getCustomItems", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (keys) {
                                localVarQueryParameter["keys"] = keys;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
         * @summary Get Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomKeys: function (projectId, customId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getCustomKeys", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("getCustomKeys", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/keys"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (projectId, playerId, keys, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (keys) {
                                localVarQueryParameter["keys"] = keys;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (projectId, playerId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getKeys", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getKeys", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/keys"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves private save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomItems: function (projectId, customId, keys, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getPrivateCustomItems", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("getPrivateCustomItems", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            if (keys) {
                                localVarQueryParameter["keys"] = keys;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a paged list of private keys for the given custom ID, ordered alphabetically in pages of 100. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomKeys: function (projectId, customId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getPrivateCustomKeys", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("getPrivateCustomKeys", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/keys"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves protected save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedItems: function (projectId, playerId, keys, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getProtectedItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getProtectedItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (keys) {
                                localVarQueryParameter["keys"] = keys;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a paged list of protected keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Protected Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedKeys: function (projectId, playerId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getProtectedKeys", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getProtectedKeys", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/keys"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicItems: function (projectId, playerId, keys, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getPublicItems", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getPublicItems", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (keys) {
                                localVarQueryParameter["keys"] = keys;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a paged list of public keys for the given player, ordered alphabetically in pages of 100. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeys: function (projectId, playerId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getPublicKeys", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getPublicKeys", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/keys"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query custom data with the default access class. If no index is available to fulfil the query then the query will fail
         * @summary Query Default Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultCustomData: function (projectId, queryIndexBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("queryDefaultCustomData", "projectId", projectId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/query".replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryIndexBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query player data with the default access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Default Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultPlayerData: function (projectId, queryIndexBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("queryDefaultPlayerData", "projectId", projectId);
                            localVarPath = "/v1/data/projects/{projectId}/players/query".replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryIndexBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query custom data with the private access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Private Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPrivateCustomData: function (projectId, queryIndexBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("queryPrivateCustomData", "projectId", projectId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/private/query".replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryIndexBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query player data with the protected access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Protected Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryProtectedPlayerData: function (projectId, queryIndexBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("queryProtectedPlayerData", "projectId", projectId);
                            localVarPath = "/v1/data/projects/{projectId}/players/protected/query".replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryIndexBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query player data with the public access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Public Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPublicPlayerData: function (projectId, queryIndexBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("queryPublicPlayerData", "projectId", projectId);
                            localVarPath = "/v1/data/projects/{projectId}/players/public/query".replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queryIndexBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItem: function (projectId, customId, setItemBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setCustomItem", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("setCustomItem", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all default access level slots for the custom ID. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setCustomItemBatch", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("setCustomItemBatch", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/item-batch"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBatchBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
         * @summary Set Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItem: function (projectId, playerId, setItemBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all default access level slots for the player. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setItemBatch", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setItemBatch", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/item-batch"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBatchBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a private data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all private access level slots. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItem: function (projectId, customId, setItemBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setPrivateCustomItem", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("setPrivateCustomItem", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set up to 20 private data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all private access level slots for the custom ID. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setPrivateCustomItemBatch", "projectId", projectId);
                            // verify required parameter 'customId' is not null or undefined
                            (0, common_1.assertParamExists)("setPrivateCustomItemBatch", "customId", customId);
                            localVarPath = "/v1/data/projects/{projectId}/custom/{customId}/private/item-batch"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("customId", "}"), encodeURIComponent(String(customId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBatchBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a protected data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all protected access level slots. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItem: function (projectId, playerId, setItemBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setProtectedItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setProtectedItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set up to 20 protected data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setProtectedItemBatch", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setProtectedItemBatch", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/protected/item-batch"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBatchBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a public data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all public access level slots. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The value set will be publicly readable by any player.
         * @summary Set Public Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItem: function (projectId, playerId, setItemBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setPublicItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setPublicItem", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set up to 20 public data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Public Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("setPublicItemBatch", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("setPublicItemBatch", "playerId", playerId);
                            localVarPath = "/v1/data/projects/{projectId}/players/{playerId}/public/item-batch"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(setItemBatchBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DataApiAxiosParamCreator = DataApiAxiosParamCreator;
/**
 * DataApi - functional programming interface
 * @export
 */
var DataApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Deletes a data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItem: function (key, projectId, customId, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCustomItem(key, projectId, customId, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all default access level data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItems: function (projectId, customId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCustomItems(projectId, customId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a data item by the specified key for the given player.
         * @summary Delete Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (key, projectId, playerId, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItem(key, projectId, playerId, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all default access level data associated with a given player.
         * @summary Delete Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (projectId, playerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteItems(projectId, playerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a private data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItem: function (key, projectId, customId, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePrivateCustomItem(key, projectId, customId, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all private data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItems: function (projectId, customId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePrivateCustomItems(projectId, customId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a protected data item by the specified key for the given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItem: function (key, projectId, playerId, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProtectedItem(key, projectId, playerId, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all protected data associated with a given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItems: function (projectId, playerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProtectedItems(projectId, playerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes a public data item by the specified key for the given player.
         * @summary Delete Public Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItem: function (key, projectId, playerId, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePublicItem(key, projectId, playerId, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all public data associated with a given player.
         * @summary Delete Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItems: function (projectId, playerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePublicItems(projectId, playerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomItems: function (projectId, customId, keys, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomItems(projectId, customId, keys, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
         * @summary Get Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomKeys: function (projectId, customId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomKeys(projectId, customId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (projectId, playerId, keys, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getItems(projectId, playerId, keys, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (projectId, playerId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getKeys(projectId, playerId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves private save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomItems: function (projectId, customId, keys, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPrivateCustomItems(projectId, customId, keys, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a paged list of private keys for the given custom ID, ordered alphabetically in pages of 100. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomKeys: function (projectId, customId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPrivateCustomKeys(projectId, customId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves protected save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedItems: function (projectId, playerId, keys, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProtectedItems(projectId, playerId, keys, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a paged list of protected keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Protected Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedKeys: function (projectId, playerId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProtectedKeys(projectId, playerId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicItems: function (projectId, playerId, keys, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPublicItems(projectId, playerId, keys, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a paged list of public keys for the given player, ordered alphabetically in pages of 100. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeys: function (projectId, playerId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPublicKeys(projectId, playerId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query custom data with the default access class. If no index is available to fulfil the query then the query will fail
         * @summary Query Default Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultCustomData: function (projectId, queryIndexBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryDefaultCustomData(projectId, queryIndexBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query player data with the default access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Default Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultPlayerData: function (projectId, queryIndexBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryDefaultPlayerData(projectId, queryIndexBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query custom data with the private access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Private Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPrivateCustomData: function (projectId, queryIndexBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryPrivateCustomData(projectId, queryIndexBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query player data with the protected access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Protected Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryProtectedPlayerData: function (projectId, queryIndexBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryProtectedPlayerData(projectId, queryIndexBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query player data with the public access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Public Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPublicPlayerData: function (projectId, queryIndexBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryPublicPlayerData(projectId, queryIndexBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItem: function (projectId, customId, setItemBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setCustomItem(projectId, customId, setItemBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all default access level slots for the custom ID. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setCustomItemBatch(projectId, customId, setItemBatchBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
         * @summary Set Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItem: function (projectId, playerId, setItemBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setItem(projectId, playerId, setItemBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all default access level slots for the player. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setItemBatch(projectId, playerId, setItemBatchBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a private data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all private access level slots. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItem: function (projectId, customId, setItemBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPrivateCustomItem(projectId, customId, setItemBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set up to 20 private data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all private access level slots for the custom ID. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPrivateCustomItemBatch(projectId, customId, setItemBatchBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a protected data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all protected access level slots. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItem: function (projectId, playerId, setItemBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setProtectedItem(projectId, playerId, setItemBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set up to 20 protected data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setProtectedItemBatch(projectId, playerId, setItemBatchBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a public data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all public access level slots. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The value set will be publicly readable by any player.
         * @summary Set Public Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItem: function (projectId, playerId, setItemBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPublicItem(projectId, playerId, setItemBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set up to 20 public data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Public Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPublicItemBatch(projectId, playerId, setItemBatchBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DataApiFp = DataApiFp;
/**
 * DataApi - factory interface
 * @export
 */
var DataApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DataApiFp)(configuration);
    return {
        /**
         * Deletes a data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItem: function (key, projectId, customId, writeLock, options) {
            return localVarFp
                .deleteCustomItem(key, projectId, customId, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all default access level data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomItems: function (projectId, customId, options) {
            return localVarFp
                .deleteCustomItems(projectId, customId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a data item by the specified key for the given player.
         * @summary Delete Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (key, projectId, playerId, writeLock, options) {
            return localVarFp
                .deleteItem(key, projectId, playerId, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all default access level data associated with a given player.
         * @summary Delete Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItems: function (projectId, playerId, options) {
            return localVarFp
                .deleteItems(projectId, playerId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a private data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItem: function (key, projectId, customId, writeLock, options) {
            return localVarFp
                .deletePrivateCustomItem(key, projectId, customId, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all private data associated with a given custom ID. Only accessible via an authenticated server authority.
         * @summary Delete Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateCustomItems: function (projectId, customId, options) {
            return localVarFp
                .deletePrivateCustomItems(projectId, customId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a protected data item by the specified key for the given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItem: function (key, projectId, playerId, writeLock, options) {
            return localVarFp
                .deleteProtectedItem(key, projectId, playerId, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all protected data associated with a given player. Only accessible via an authenticated server authority.
         * @summary Delete Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProtectedItems: function (projectId, playerId, options) {
            return localVarFp
                .deleteProtectedItems(projectId, playerId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes a public data item by the specified key for the given player.
         * @summary Delete Public Player Item
         * @param {string} key Item key.
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItem: function (key, projectId, playerId, writeLock, options) {
            return localVarFp
                .deletePublicItem(key, projectId, playerId, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all public data associated with a given player.
         * @summary Delete Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublicItems: function (projectId, playerId, options) {
            return localVarFp
                .deletePublicItems(projectId, playerId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomItems: function (projectId, customId, keys, after, options) {
            return localVarFp
                .getCustomItems(projectId, customId, keys, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
         * @summary Get Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomKeys: function (projectId, customId, after, options) {
            return localVarFp
                .getCustomKeys(projectId, customId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (projectId, playerId, keys, after, options) {
            return localVarFp
                .getItems(projectId, playerId, keys, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeys: function (projectId, playerId, after, options) {
            return localVarFp
                .getKeys(projectId, playerId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves private save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Items
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomItems: function (projectId, customId, keys, after, options) {
            return localVarFp
                .getPrivateCustomItems(projectId, customId, keys, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a paged list of private keys for the given custom ID, ordered alphabetically in pages of 100. Only accessible via an authenticated server authority.
         * @summary Get Private Custom Keys
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateCustomKeys: function (projectId, customId, after, options) {
            return localVarFp
                .getPrivateCustomKeys(projectId, customId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves protected save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
         * @summary Get Protected Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedItems: function (projectId, playerId, keys, after, options) {
            return localVarFp
                .getProtectedItems(projectId, playerId, keys, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a paged list of protected keys for the given player, ordered alphabetically in pages of 100.
         * @summary Get Protected Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProtectedKeys: function (projectId, playerId, after, options) {
            return localVarFp
                .getProtectedKeys(projectId, playerId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Items
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
         * @param {string} [after] The key after which to retrieve the next page of keys.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicItems: function (projectId, playerId, keys, after, options) {
            return localVarFp
                .getPublicItems(projectId, playerId, keys, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a paged list of public keys for the given player, ordered alphabetically in pages of 100. Accessible by any player for any other player\'s data.
         * @summary Get Public Player Keys
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] Returns the page of results after the key specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeys: function (projectId, playerId, after, options) {
            return localVarFp
                .getPublicKeys(projectId, playerId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query custom data with the default access class. If no index is available to fulfil the query then the query will fail
         * @summary Query Default Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultCustomData: function (projectId, queryIndexBody, options) {
            return localVarFp
                .queryDefaultCustomData(projectId, queryIndexBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query player data with the default access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Default Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefaultPlayerData: function (projectId, queryIndexBody, options) {
            return localVarFp
                .queryDefaultPlayerData(projectId, queryIndexBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query custom data with the private access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Private Custom Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPrivateCustomData: function (projectId, queryIndexBody, options) {
            return localVarFp
                .queryPrivateCustomData(projectId, queryIndexBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query player data with the protected access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Protected Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryProtectedPlayerData: function (projectId, queryIndexBody, options) {
            return localVarFp
                .queryProtectedPlayerData(projectId, queryIndexBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query player data with the public access class. If no index is available to fulfil the query then the query will fail.
         * @summary Query Public Player Data
         * @param {string} projectId ID of the project.
         * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPublicPlayerData: function (projectId, queryIndexBody, options) {
            return localVarFp
                .queryPublicPlayerData(projectId, queryIndexBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItem: function (projectId, customId, setItemBody, options) {
            return localVarFp
                .setCustomItem(projectId, customId, setItemBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all default access level slots for the custom ID. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            return localVarFp
                .setCustomItemBatch(projectId, customId, setItemBatchBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
         * @summary Set Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItem: function (projectId, playerId, setItemBody, options) {
            return localVarFp
                .setItem(projectId, playerId, setItemBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all default access level slots for the player. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return localVarFp
                .setItemBatch(projectId, playerId, setItemBatchBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a private data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all private access level slots. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItem: function (projectId, customId, setItemBody, options) {
            return localVarFp
                .setPrivateCustomItem(projectId, customId, setItemBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set up to 20 private data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all private access level slots for the custom ID. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Private Custom Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrivateCustomItemBatch: function (projectId, customId, setItemBatchBody, options) {
            return localVarFp
                .setPrivateCustomItemBatch(projectId, customId, setItemBatchBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a protected data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all protected access level slots. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItem: function (projectId, playerId, setItemBody, options) {
            return localVarFp
                .setProtectedItem(projectId, playerId, setItemBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set up to 20 protected data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
         * @summary Set Protected Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProtectedItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return localVarFp
                .setProtectedItemBatch(projectId, playerId, setItemBatchBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a public data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all public access level slots. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The value set will be publicly readable by any player.
         * @summary Set Public Player Item
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItem: function (projectId, playerId, setItemBody, options) {
            return localVarFp
                .setPublicItem(projectId, playerId, setItemBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set up to 20 public data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
         * @summary Set Public Player Item Batch
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPublicItemBatch: function (projectId, playerId, setItemBatchBody, options) {
            return localVarFp
                .setPublicItemBatch(projectId, playerId, setItemBatchBody, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DataApiFactory = DataApiFactory;
/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
var DataApi = /** @class */ (function (_super) {
    __extends(DataApi, _super);
    function DataApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
     * @summary Delete Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteCustomItem = function (key, projectId, customId, writeLock, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteCustomItem(key, projectId, customId, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all default access level data associated with a given custom ID. Only accessible via an authenticated server authority.
     * @summary Delete Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteCustomItems = function (projectId, customId, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteCustomItems(projectId, customId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a data item by the specified key for the given player.
     * @summary Delete Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteItem = function (key, projectId, playerId, writeLock, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteItem(key, projectId, playerId, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all default access level data associated with a given player.
     * @summary Delete Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteItems = function (projectId, playerId, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteItems(projectId, playerId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a private data item by the specified key for the specified custom ID. Only accessible via an authenticated server authority.
     * @summary Delete Private Custom Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deletePrivateCustomItem = function (key, projectId, customId, writeLock, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deletePrivateCustomItem(key, projectId, customId, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all private data associated with a given custom ID. Only accessible via an authenticated server authority.
     * @summary Delete Private Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deletePrivateCustomItems = function (projectId, customId, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deletePrivateCustomItems(projectId, customId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a protected data item by the specified key for the given player. Only accessible via an authenticated server authority.
     * @summary Delete Protected Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteProtectedItem = function (key, projectId, playerId, writeLock, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteProtectedItem(key, projectId, playerId, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all protected data associated with a given player. Only accessible via an authenticated server authority.
     * @summary Delete Protected Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deleteProtectedItems = function (projectId, playerId, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deleteProtectedItems(projectId, playerId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes a public data item by the specified key for the given player.
     * @summary Delete Public Player Item
     * @param {string} key Item key.
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing data item. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deletePublicItem = function (key, projectId, playerId, writeLock, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deletePublicItem(key, projectId, playerId, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all public data associated with a given player.
     * @summary Delete Public Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.deletePublicItems = function (projectId, playerId, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .deletePublicItems(projectId, playerId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getCustomItems = function (projectId, customId, keys, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getCustomItems(projectId, customId, keys, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a paged list of keys for the given custom ID, ordered alphabetically in pages of 100.
     * @summary Get Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getCustomKeys = function (projectId, customId, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getCustomKeys(projectId, customId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getItems = function (projectId, playerId, keys, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getItems(projectId, playerId, keys, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a paged list of keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getKeys = function (projectId, playerId, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getKeys(projectId, playerId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves private save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Only accessible via an authenticated server authority.
     * @summary Get Private Custom Items
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getPrivateCustomItems = function (projectId, customId, keys, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getPrivateCustomItems(projectId, customId, keys, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a paged list of private keys for the given custom ID, ordered alphabetically in pages of 100. Only accessible via an authenticated server authority.
     * @summary Get Private Custom Keys
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getPrivateCustomKeys = function (projectId, customId, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getPrivateCustomKeys(projectId, customId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves protected save data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20.
     * @summary Get Protected Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getProtectedItems = function (projectId, playerId, keys, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getProtectedItems(projectId, playerId, keys, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a paged list of protected keys for the given player, ordered alphabetically in pages of 100.
     * @summary Get Protected Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getProtectedKeys = function (projectId, playerId, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getProtectedKeys(projectId, playerId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves saved data values for all keys specified, ordered alphabetically in pages of 20. If no keys are supplied then returns all keys, ordered alphabetically in pages of 20. Accessible by any player for any other player\'s data.
     * @summary Get Public Player Items
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {Array<string>} [keys] The keys to retrieve, in exploded form style, e.g. &#x60;keys&#x3D;KEY1&amp;keys&#x3D;KEY2&amp;keys&#x3D;KEY3&#x60;.
     * @param {string} [after] The key after which to retrieve the next page of keys.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getPublicItems = function (projectId, playerId, keys, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getPublicItems(projectId, playerId, keys, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a paged list of public keys for the given player, ordered alphabetically in pages of 100. Accessible by any player for any other player\'s data.
     * @summary Get Public Player Keys
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] Returns the page of results after the key specified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.getPublicKeys = function (projectId, playerId, after, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .getPublicKeys(projectId, playerId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query custom data with the default access class. If no index is available to fulfil the query then the query will fail
     * @summary Query Default Custom Data
     * @param {string} projectId ID of the project.
     * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.queryDefaultCustomData = function (projectId, queryIndexBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .queryDefaultCustomData(projectId, queryIndexBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query player data with the default access class. If no index is available to fulfil the query then the query will fail.
     * @summary Query Default Player Data
     * @param {string} projectId ID of the project.
     * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.queryDefaultPlayerData = function (projectId, queryIndexBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .queryDefaultPlayerData(projectId, queryIndexBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query custom data with the private access class. If no index is available to fulfil the query then the query will fail.
     * @summary Query Private Custom Data
     * @param {string} projectId ID of the project.
     * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.queryPrivateCustomData = function (projectId, queryIndexBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .queryPrivateCustomData(projectId, queryIndexBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query player data with the protected access class. If no index is available to fulfil the query then the query will fail.
     * @summary Query Protected Player Data
     * @param {string} projectId ID of the project.
     * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.queryProtectedPlayerData = function (projectId, queryIndexBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .queryProtectedPlayerData(projectId, queryIndexBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query player data with the public access class. If no index is available to fulfil the query then the query will fail.
     * @summary Query Public Player Data
     * @param {string} projectId ID of the project.
     * @param {QueryIndexBody} [queryIndexBody] Query object with an array of conditions to query the data with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.queryPublicPlayerData = function (projectId, queryIndexBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .queryPublicPlayerData(projectId, queryIndexBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
     * @summary Set Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setCustomItem = function (projectId, customId, setItemBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setCustomItem(projectId, customId, setItemBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set up to 20 data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all default access level slots for the custom ID. The entire default access level saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
     * @summary Set Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setCustomItemBatch = function (projectId, customId, setItemBatchBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setCustomItemBatch(projectId, customId, setItemBatchBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all default access level slots. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error.
     * @summary Set Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setItem = function (projectId, playerId, setItemBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setItem(projectId, playerId, setItemBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set up to 20 data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all default access level slots for the player. The entire default access level saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setItemBatch = function (projectId, playerId, setItemBatchBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setItemBatch(projectId, playerId, setItemBatchBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a private data item with a given key and value for the specified custom ID. The value is limited to a maximum size of 5 MB across all private access level slots. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
     * @summary Set Private Custom Item
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setPrivateCustomItem = function (projectId, customId, setItemBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setPrivateCustomItem(projectId, customId, setItemBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set up to 20 private data items with key, value and optional writeLock against the custom ID. The values are limited to a maximum size of 5 MB across all private access level slots for the custom ID. The entire private saved state for a custom ID is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
     * @summary Set Private Custom Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} customId The custom data ID specified by the user. Must be between 1 and 50 characters long and contain only alphanumeric characters, underscores, and hyphens.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a custom ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setPrivateCustomItemBatch = function (projectId, customId, setItemBatchBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setPrivateCustomItemBatch(projectId, customId, setItemBatchBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a protected data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all protected access level slots. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. Only accessible via an authenticated server authority.
     * @summary Set Protected Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setProtectedItem = function (projectId, playerId, setItemBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setProtectedItem(projectId, playerId, setItemBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set up to 20 protected data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire protected saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed. Only accessible via an authenticated server authority.
     * @summary Set Protected Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setProtectedItemBatch = function (projectId, playerId, setItemBatchBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setProtectedItemBatch(projectId, playerId, setItemBatchBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a public data item with a given key and value for the specified player. The value is limited to a maximum size of 5 MB across all public access level slots. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The value set will be publicly readable by any player.
     * @summary Set Public Player Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBody} [setItemBody] Add a data item to store for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setPublicItem = function (projectId, playerId, setItemBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setPublicItem(projectId, playerId, setItemBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set up to 20 public data items with key, value and optional writeLock for the given player. The values are limited to a maximum size of 5 MB across all slots for the player. The entire public saved state for a player is limited to 2000 keys. Attempting to set a new key beyond this limit will result in an error. The batch set operation is considered atomic and if any of the set key operation fails, the entire operation is failed. Error responses should identify the affected key operations that failed.
     * @summary Set Public Player Item Batch
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {SetItemBatchBody} [setItemBatchBody] Set batch data items for a player.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    DataApi.prototype.setPublicItemBatch = function (projectId, playerId, setItemBatchBody, options) {
        var _this = this;
        return (0, exports.DataApiFp)(this.configuration)
            .setPublicItemBatch(projectId, playerId, setItemBatchBody, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DataApi;
}(base_1.BaseAPI));
exports.DataApi = DataApi;
/**
 * FilesApi - axios parameter creator
 * @export
 */
var FilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Deletes the specified player file. If a WriteLock is provided, the file will only be deleted if it matches the stored WriteLock.
         * @summary Delete Player File
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing file. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (projectId, playerId, key, writeLock, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteFile", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("deleteFile", "playerId", playerId);
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("deleteFile", "key", key);
                            localVarPath = "/v1/files/projects/{projectId}/players/{playerId}/items/{key}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)))
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (writeLock !== undefined) {
                                localVarQueryParameter["writeLock"] = writeLock;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Generates a signed URL that will allow the client to download the requested player file for a limited period of time. If successful, an object will be returned containing all necessary information to perform the download.
         * @summary Get Player File Download URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: function (projectId, playerId, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getDownloadUrl", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getDownloadUrl", "playerId", playerId);
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("getDownloadUrl", "key", key);
                            localVarPath = "/v1/files/projects/{projectId}/players/{playerId}/items/{key}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)))
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves the metadata (size, date last modified and created, key, content type, and current WriteLock) of a single player file.
         * @summary Get Player File Metadata
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (projectId, playerId, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getFileMetadata", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getFileMetadata", "playerId", playerId);
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("getFileMetadata", "key", key);
                            localVarPath = "/v1/files/projects/{projectId}/players/{playerId}/items/{key}/metadata"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)))
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Initiates the player file upload process and returns a URL to which the actual file contents can be uploaded. The type, length and MD5 hash of the file have to be provided up-front. If successful, an object will be returned containing all necessary information to perform the upload.
         * @summary Get Player File upload URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {FileDetails} [fileDetails]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadUrl: function (projectId, playerId, key, fileDetails, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("getUploadUrl", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("getUploadUrl", "playerId", playerId);
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)("getUploadUrl", "key", key);
                            localVarPath = "/v1/files/projects/{projectId}/players/{playerId}/items/{key}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)))
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(fileDetails, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of names of all the files currently saved in storage for a player along with size (in bytes), last date modified and current WriteLock. Ordered alphabetically in page sizes of 20.
         * @summary List Player Files
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] The key after which to retrieve the next page of files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayerFiles: function (projectId, playerId, after, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)("listPlayerFiles", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            (0, common_1.assertParamExists)("listPlayerFiles", "playerId", playerId);
                            localVarPath = "/v1/files/projects/{projectId}/players/{playerId}/items"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("playerId", "}"), encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication ServiceAccount required
                            // http bearer authentication required
                            _a.sent();
                            // authentication Client required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 2:
                            // authentication Client required
                            // http bearer authentication required
                            _a.sent();
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FilesApiAxiosParamCreator = FilesApiAxiosParamCreator;
/**
 * FilesApi - functional programming interface
 * @export
 */
var FilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FilesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Deletes the specified player file. If a WriteLock is provided, the file will only be deleted if it matches the stored WriteLock.
         * @summary Delete Player File
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing file. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (projectId, playerId, key, writeLock, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteFile(projectId, playerId, key, writeLock, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generates a signed URL that will allow the client to download the requested player file for a limited period of time. If successful, an object will be returned containing all necessary information to perform the download.
         * @summary Get Player File Download URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: function (projectId, playerId, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDownloadUrl(projectId, playerId, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves the metadata (size, date last modified and created, key, content type, and current WriteLock) of a single player file.
         * @summary Get Player File Metadata
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (projectId, playerId, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFileMetadata(projectId, playerId, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Initiates the player file upload process and returns a URL to which the actual file contents can be uploaded. The type, length and MD5 hash of the file have to be provided up-front. If successful, an object will be returned containing all necessary information to perform the upload.
         * @summary Get Player File upload URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {FileDetails} [fileDetails]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadUrl: function (projectId, playerId, key, fileDetails, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUploadUrl(projectId, playerId, key, fileDetails, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a list of names of all the files currently saved in storage for a player along with size (in bytes), last date modified and current WriteLock. Ordered alphabetically in page sizes of 20.
         * @summary List Player Files
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] The key after which to retrieve the next page of files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayerFiles: function (projectId, playerId, after, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPlayerFiles(projectId, playerId, after, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.FilesApiFp = FilesApiFp;
/**
 * FilesApi - factory interface
 * @export
 */
var FilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FilesApiFp)(configuration);
    return {
        /**
         * Deletes the specified player file. If a WriteLock is provided, the file will only be deleted if it matches the stored WriteLock.
         * @summary Delete Player File
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {string} [writeLock] Enforces conflict checking when deleting an existing file. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: function (projectId, playerId, key, writeLock, options) {
            return localVarFp
                .deleteFile(projectId, playerId, key, writeLock, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generates a signed URL that will allow the client to download the requested player file for a limited period of time. If successful, an object will be returned containing all necessary information to perform the download.
         * @summary Get Player File Download URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: function (projectId, playerId, key, options) {
            return localVarFp
                .getDownloadUrl(projectId, playerId, key, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves the metadata (size, date last modified and created, key, content type, and current WriteLock) of a single player file.
         * @summary Get Player File Metadata
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMetadata: function (projectId, playerId, key, options) {
            return localVarFp
                .getFileMetadata(projectId, playerId, key, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Initiates the player file upload process and returns a URL to which the actual file contents can be uploaded. The type, length and MD5 hash of the file have to be provided up-front. If successful, an object will be returned containing all necessary information to perform the upload.
         * @summary Get Player File upload URL
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} key Item key.
         * @param {FileDetails} [fileDetails]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadUrl: function (projectId, playerId, key, fileDetails, options) {
            return localVarFp
                .getUploadUrl(projectId, playerId, key, fileDetails, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of names of all the files currently saved in storage for a player along with size (in bytes), last date modified and current WriteLock. Ordered alphabetically in page sizes of 20.
         * @summary List Player Files
         * @param {string} projectId ID of the project.
         * @param {string} playerId The player ID supplied by the Authorization service.
         * @param {string} [after] The key after which to retrieve the next page of files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlayerFiles: function (projectId, playerId, after, options) {
            return localVarFp
                .listPlayerFiles(projectId, playerId, after, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FilesApiFactory = FilesApiFactory;
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
var FilesApi = /** @class */ (function (_super) {
    __extends(FilesApi, _super);
    function FilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes the specified player file. If a WriteLock is provided, the file will only be deleted if it matches the stored WriteLock.
     * @summary Delete Player File
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} key Item key.
     * @param {string} [writeLock] Enforces conflict checking when deleting an existing file. Omitting this field ignores write conflicts. When present, an error response will be returned if the writeLock in the request does not match the stored writeLock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.deleteFile = function (projectId, playerId, key, writeLock, options) {
        var _this = this;
        return (0, exports.FilesApiFp)(this.configuration)
            .deleteFile(projectId, playerId, key, writeLock, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generates a signed URL that will allow the client to download the requested player file for a limited period of time. If successful, an object will be returned containing all necessary information to perform the download.
     * @summary Get Player File Download URL
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} key Item key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.getDownloadUrl = function (projectId, playerId, key, options) {
        var _this = this;
        return (0, exports.FilesApiFp)(this.configuration)
            .getDownloadUrl(projectId, playerId, key, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves the metadata (size, date last modified and created, key, content type, and current WriteLock) of a single player file.
     * @summary Get Player File Metadata
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} key Item key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.getFileMetadata = function (projectId, playerId, key, options) {
        var _this = this;
        return (0, exports.FilesApiFp)(this.configuration)
            .getFileMetadata(projectId, playerId, key, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Initiates the player file upload process and returns a URL to which the actual file contents can be uploaded. The type, length and MD5 hash of the file have to be provided up-front. If successful, an object will be returned containing all necessary information to perform the upload.
     * @summary Get Player File upload URL
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} key Item key.
     * @param {FileDetails} [fileDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.getUploadUrl = function (projectId, playerId, key, fileDetails, options) {
        var _this = this;
        return (0, exports.FilesApiFp)(this.configuration)
            .getUploadUrl(projectId, playerId, key, fileDetails, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of names of all the files currently saved in storage for a player along with size (in bytes), last date modified and current WriteLock. Ordered alphabetically in page sizes of 20.
     * @summary List Player Files
     * @param {string} projectId ID of the project.
     * @param {string} playerId The player ID supplied by the Authorization service.
     * @param {string} [after] The key after which to retrieve the next page of files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    FilesApi.prototype.listPlayerFiles = function (projectId, playerId, after, options) {
        var _this = this;
        return (0, exports.FilesApiFp)(this.configuration)
            .listPlayerFiles(projectId, playerId, after, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FilesApi;
}(base_1.BaseAPI));
exports.FilesApi = FilesApi;
