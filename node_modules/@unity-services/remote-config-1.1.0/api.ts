/* tslint:disable */
/* eslint-disable */
/**
 * Remote Config Delivery API
 * Remote Config Settings Delivery API
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 * Used to specify attributes of the requesting app and user for use in rules.
 * @export
 * @interface RequestAttributes
 */
export interface RequestAttributes {
  /**
   *
   * @type {UnityAttributes}
   * @memberof RequestAttributes
   */
  unity?: UnityAttributes;
  /**
   * Custom attributes for the app.
   * @type {{ [key: string]: string; }}
   * @memberof RequestAttributes
   */
  app?: { [key: string]: string };
  /**
   * Custom attributes related to the user.
   * @type {{ [key: string]: string; }}
   * @memberof RequestAttributes
   */
  user?: { [key: string]: string };
}
/**
 *
 * @export
 * @interface SettingsDeliveryRequest
 */
export interface SettingsDeliveryRequest {
  /**
   * The projectId for the requesting Unity project.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  projectId: string;
  /**
   * The userID for the user requesting settings.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  userId: string;
  /**
   * An optional custom userID.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  customUserId?: string;
  /**
   * An optional environmentID to choose a non-default environment.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  environmentId?: string;
  /**
   * An optional configType. Defaults to \'settings\'
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  configType?: string;
  /**
   * An optional array of filters for including settings with keys containing any of the specified values
   * @type {Array<string>}
   * @memberof SettingsDeliveryRequest
   */
  key?: Array<string>;
  /**
   * An optional array of filters for including settings with specific schemas
   * @type {Array<string>}
   * @memberof SettingsDeliveryRequest
   */
  schemaId?: Array<string>;
  /**
   * An optional array of filters for including settings with specific types
   * @type {Array<string>}
   * @memberof SettingsDeliveryRequest
   */
  type?: Array<SettingsDeliveryRequestTypeEnum>;
  /**
   * Should be set to \'true\' when the request is coming from a debug build.
   * @type {boolean}
   * @memberof SettingsDeliveryRequest
   */
  isDebugBuild?: boolean;
  /**
   * Used to specify what Remote Config package version sent the request.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  packageVersion?: string;
  /**
   * Used to specify the origin of the request for attribution.
   * @type {string}
   * @memberof SettingsDeliveryRequest
   */
  attributionMetadata?: string;
  /**
   *
   * @type {RequestAttributes}
   * @memberof SettingsDeliveryRequest
   */
  attributes?: RequestAttributes;
}

export const SettingsDeliveryRequestTypeEnum = {
  Int: "int",
  Float: "float",
  Long: "long",
  Bool: "bool",
  String: "string",
  Json: "json",
} as const;

export type SettingsDeliveryRequestTypeEnum =
  typeof SettingsDeliveryRequestTypeEnum[keyof typeof SettingsDeliveryRequestTypeEnum];

/**
 * Attributes retrieved by Unity.
 * @export
 * @interface UnityAttributes
 */
export interface UnityAttributes {
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  appVersion?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  appBuildVersion?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  cpu?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  cpuFrequency?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  graphicsDeviceVendor?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  language?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  osVersion?: string;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  platform?: string;
  /**
   *
   * @type {number}
   * @memberof UnityAttributes
   */
  ram?: number;
  /**
   *
   * @type {string}
   * @memberof UnityAttributes
   */
  model?: string;
  /**
   *
   * @type {number}
   * @memberof UnityAttributes
   */
  timeSinceStart?: number;
}

/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettings: async (
      settingsRequest: SettingsDeliveryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'settingsRequest' is not null or undefined
      assertParamExists("assignSettings", "settingsRequest", settingsRequest);
      const localVarPath = `/settings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        settingsRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettingsGet: async (
      projectId: string,
      environmentId?: string,
      configType?: string,
      key?: Array<string>,
      schemaId?: Array<string>,
      type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("assignSettingsGet", "projectId", projectId);
      const localVarPath = `/settings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (projectId !== undefined) {
        localVarQueryParameter["projectId"] = projectId;
      }

      if (environmentId !== undefined) {
        localVarQueryParameter["environmentId"] = environmentId;
      }

      if (configType !== undefined) {
        localVarQueryParameter["configType"] = configType;
      }

      if (key) {
        localVarQueryParameter["key"] = key;
      }

      if (schemaId) {
        localVarQueryParameter["schemaId"] = schemaId;
      }

      if (type) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignSettings(
      settingsRequest: SettingsDeliveryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.assignSettings(
        settingsRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignSettingsGet(
      projectId: string,
      environmentId?: string,
      configType?: string,
      key?: Array<string>,
      schemaId?: Array<string>,
      type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.assignSettingsGet(
          projectId,
          environmentId,
          configType,
          key,
          schemaId,
          type,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SettingsApiFp(configuration);
  return {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettings(
      settingsRequest: SettingsDeliveryRequest,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .assignSettings(settingsRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettingsGet(
      projectId: string,
      environmentId?: string,
      configType?: string,
      key?: Array<string>,
      schemaId?: Array<string>,
      type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .assignSettingsGet(
          projectId,
          environmentId,
          configType,
          key,
          schemaId,
          type,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
  /**
   *
   * @summary Request settings for a user, with optional attributes for use in rules.
   * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public assignSettings(
    settingsRequest: SettingsDeliveryRequest,
    options?: AxiosRequestConfig
  ) {
    return SettingsApiFp(this.configuration)
      .assignSettings(settingsRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Request settings for a user.
   * @param {string} projectId projectId for the requesting Unity project
   * @param {string} [environmentId] optional environmentId to choose a non-default environment
   * @param {string} [configType] optional configType
   * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
   * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
   * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public assignSettingsGet(
    projectId: string,
    environmentId?: string,
    configType?: string,
    key?: Array<string>,
    schemaId?: Array<string>,
    type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">,
    options?: AxiosRequestConfig
  ) {
    return SettingsApiFp(this.configuration)
      .assignSettingsGet(
        projectId,
        environmentId,
        configType,
        key,
        schemaId,
        type,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
