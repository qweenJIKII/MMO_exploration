/**
 * Remote Config Delivery API
 * Remote Config Settings Delivery API
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from "./base";
/**
 * Used to specify attributes of the requesting app and user for use in rules.
 * @export
 * @interface RequestAttributes
 */
export interface RequestAttributes {
    /**
     *
     * @type {UnityAttributes}
     * @memberof RequestAttributes
     */
    unity?: UnityAttributes;
    /**
     * Custom attributes for the app.
     * @type {{ [key: string]: string; }}
     * @memberof RequestAttributes
     */
    app?: {
        [key: string]: string;
    };
    /**
     * Custom attributes related to the user.
     * @type {{ [key: string]: string; }}
     * @memberof RequestAttributes
     */
    user?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface SettingsDeliveryRequest
 */
export interface SettingsDeliveryRequest {
    /**
     * The projectId for the requesting Unity project.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    projectId: string;
    /**
     * The userID for the user requesting settings.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    userId: string;
    /**
     * An optional custom userID.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    customUserId?: string;
    /**
     * An optional environmentID to choose a non-default environment.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    environmentId?: string;
    /**
     * An optional configType. Defaults to \'settings\'
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    configType?: string;
    /**
     * An optional array of filters for including settings with keys containing any of the specified values
     * @type {Array<string>}
     * @memberof SettingsDeliveryRequest
     */
    key?: Array<string>;
    /**
     * An optional array of filters for including settings with specific schemas
     * @type {Array<string>}
     * @memberof SettingsDeliveryRequest
     */
    schemaId?: Array<string>;
    /**
     * An optional array of filters for including settings with specific types
     * @type {Array<string>}
     * @memberof SettingsDeliveryRequest
     */
    type?: Array<SettingsDeliveryRequestTypeEnum>;
    /**
     * Should be set to \'true\' when the request is coming from a debug build.
     * @type {boolean}
     * @memberof SettingsDeliveryRequest
     */
    isDebugBuild?: boolean;
    /**
     * Used to specify what Remote Config package version sent the request.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    packageVersion?: string;
    /**
     * Used to specify the origin of the request for attribution.
     * @type {string}
     * @memberof SettingsDeliveryRequest
     */
    attributionMetadata?: string;
    /**
     *
     * @type {RequestAttributes}
     * @memberof SettingsDeliveryRequest
     */
    attributes?: RequestAttributes;
}
export declare const SettingsDeliveryRequestTypeEnum: {
    readonly Int: "int";
    readonly Float: "float";
    readonly Long: "long";
    readonly Bool: "bool";
    readonly String: "string";
    readonly Json: "json";
};
export declare type SettingsDeliveryRequestTypeEnum = typeof SettingsDeliveryRequestTypeEnum[keyof typeof SettingsDeliveryRequestTypeEnum];
/**
 * Attributes retrieved by Unity.
 * @export
 * @interface UnityAttributes
 */
export interface UnityAttributes {
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    appVersion?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    appBuildVersion?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    cpu?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    cpuFrequency?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    graphicsDeviceVendor?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    language?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    osVersion?: string;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    platform?: string;
    /**
     *
     * @type {number}
     * @memberof UnityAttributes
     */
    ram?: number;
    /**
     *
     * @type {string}
     * @memberof UnityAttributes
     */
    model?: string;
    /**
     *
     * @type {number}
     * @memberof UnityAttributes
     */
    timeSinceStart?: number;
}
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export declare const SettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettings: (settingsRequest: SettingsDeliveryRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettingsGet: (projectId: string, environmentId?: string, configType?: string, key?: Array<string>, schemaId?: Array<string>, type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SettingsApi - functional programming interface
 * @export
 */
export declare const SettingsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettings(settingsRequest: SettingsDeliveryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettingsGet(projectId: string, environmentId?: string, configType?: string, key?: Array<string>, schemaId?: Array<string>, type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * SettingsApi - factory interface
 * @export
 */
export declare const SettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettings(settingsRequest: SettingsDeliveryRequest, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignSettingsGet(projectId: string, environmentId?: string, configType?: string, key?: Array<string>, schemaId?: Array<string>, type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">, options?: any): AxiosPromise<object>;
};
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export declare class SettingsApi extends BaseAPI {
    /**
     *
     * @summary Request settings for a user, with optional attributes for use in rules.
     * @param {SettingsDeliveryRequest} settingsRequest Request to assign settings for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    assignSettings(settingsRequest: SettingsDeliveryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Request settings for a user.
     * @param {string} projectId projectId for the requesting Unity project
     * @param {string} [environmentId] optional environmentId to choose a non-default environment
     * @param {string} [configType] optional configType
     * @param {Array<string>} [key] optional filter to include settings with keys containing any of the specified values
     * @param {Array<string>} [schemaId] optional filter to include settings with specific schemas in the response
     * @param {Array<'int' | 'float' | 'long' | 'bool' | 'string' | 'json'>} [type] optional filter to include settings with specific types in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    assignSettingsGet(projectId: string, environmentId?: string, configType?: string, key?: Array<string>, schemaId?: Array<string>, type?: Array<"int" | "float" | "long" | "bool" | "string" | "json">, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object>>;
}
