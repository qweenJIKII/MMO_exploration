"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Economy API
 * # Introduction   This document outlines the API specification for the Economy API.   The Economy service allows the game client to retrieve and modify a player\'s economy resources in the cloud. # Concepts   ## Resources   Economy currently allows interaction with the following types of resources:   - Currencies: A resource that, when defined, contains two parameters: Initial and Max. The Initial parameter determines how much of the currency a game assigns to a player upon first interacting with the Economy system. The Max parameter determines how much of the currency the player is allowed to have.   - Inventory Items: A resource that doesn\'t have any set parameters; its intended use is to indicate the ownership or acquisition of an item in-game, for example, Sword and Shield.     A game client can add, remove or update the associated data of an instance of a configured inventory item from the player\'s inventory.   - Virtual Purchases: A transactional resource to implement a shop or trade feature. Allows the player to buy items/currencies using the previously defined currencies or inventory items.     A game client can redeem a virtual purchase and the player\'s account updates with the rewards if the costs criteria are met.   - Real Money Purchases: A transactional resource with the intended use to facilitate a shop or trade feature. Allows the player to buy any amount of items/currencies through an in-app purchase. Only uses the previously defined currencies or inventory items.     A game client can redeem a real money purchase and the player\'s account updates with the rewards.      The above resources also have an optional Custom Data parameter that can be populated with JSON data from the dashboard to allow clients to read bespoke data.   ## Writelock   The WriteLock is an integer that is automatically incremented serverside whenever a request that changes the stored value of a player\'s account or inventory.   The purpose of the WriteLock is to help prevent requests from the same or other game clients happening out-of-sync.   This parameter is optional, but when supplied with a request, the service does a comparison with the stored WriteLock on the server, and returns an error on mismatch.   ## Rate Limits   The API has rate limiting in place. Requests are limited on a per-player basis up to 60 requests per minute.   The API responds with a `429` HTTP status code if the requests exceed the rate limit.   Responses with a `429` status code include a `Retry-After` header to be used in conjunction with a client\'s retry logic, the value is the number of seconds until a request for the given player is accepted.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PurchasesApi = exports.PurchasesApiFactory = exports.PurchasesApiFp = exports.PurchasesApiAxiosParamCreator = exports.InventoryApi = exports.InventoryApiFactory = exports.InventoryApiFp = exports.InventoryApiAxiosParamCreator = exports.CurrenciesApi = exports.CurrenciesApiFactory = exports.CurrenciesApiFp = exports.CurrenciesApiAxiosParamCreator = exports.ConfigurationApi = exports.ConfigurationApiFactory = exports.ConfigurationApiFp = exports.ConfigurationApiAxiosParamCreator = exports.VirtualPurchaseResourceTypeEnum = exports.RealMoneyPurchaseResourceTypeEnum = exports.PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum = exports.PlayerPurchaseAppleappstoreResponseVerificationStatusEnum = exports.InventoryItemResourceTypeEnum = exports.CurrencyResourceTypeEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CurrencyResourceTypeEnum = {
    Currency: "CURRENCY",
};
exports.InventoryItemResourceTypeEnum = {
    InventoryItem: "INVENTORY_ITEM",
};
exports.PlayerPurchaseAppleappstoreResponseVerificationStatusEnum = {
    Valid: "VALID",
    ValidNotRedeemed: "VALID_NOT_REDEEMED",
    InvalidAlreadyRedeemed: "INVALID_ALREADY_REDEEMED",
    InvalidVerificationFailed: "INVALID_VERIFICATION_FAILED",
    InvalidAnotherPlayer: "INVALID_ANOTHER_PLAYER",
    InvalidConfiguration: "INVALID_CONFIGURATION",
    InvalidProductIdMismatch: "INVALID_PRODUCT_ID_MISMATCH",
};
exports.PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum = {
    Valid: "VALID",
    ValidNotRedeemed: "VALID_NOT_REDEEMED",
    InvalidAlreadyRedeemed: "INVALID_ALREADY_REDEEMED",
    InvalidVerificationFailed: "INVALID_VERIFICATION_FAILED",
    InvalidAnotherPlayer: "INVALID_ANOTHER_PLAYER",
    InvalidConfiguration: "INVALID_CONFIGURATION",
    InvalidProductIdMismatch: "INVALID_PRODUCT_ID_MISMATCH",
};
exports.RealMoneyPurchaseResourceTypeEnum = {
    MoneyPurchase: "MONEY_PURCHASE",
};
exports.VirtualPurchaseResourceTypeEnum = {
    VirtualPurchase: "VIRTUAL_PURCHASE",
};
/**
 * ConfigurationApi - axios parameter creator
 * @export
 */
exports.ConfigurationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the economy configuration for the player with any overrides applied.
         * @summary Get player\'s configuration
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerConfiguration: function (projectId, playerId, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("getPlayerConfiguration", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("getPlayerConfiguration", "playerId", playerId);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/config/resources"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ConfigurationApi - functional programming interface
 * @export
 */
exports.ConfigurationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ConfigurationApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the economy configuration for the player with any overrides applied.
         * @summary Get player\'s configuration
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerConfiguration: function (projectId, playerId, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlayerConfiguration(projectId, playerId, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ConfigurationApi - factory interface
 * @export
 */
exports.ConfigurationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ConfigurationApiFp(configuration);
    return {
        /**
         * Returns the economy configuration for the player with any overrides applied.
         * @summary Get player\'s configuration
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerConfiguration: function (projectId, playerId, configAssignmentHash, options) {
            return localVarFp
                .getPlayerConfiguration(projectId, playerId, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ConfigurationApi - object-oriented interface
 * @export
 * @class ConfigurationApi
 * @extends {BaseAPI}
 */
var ConfigurationApi = /** @class */ (function (_super) {
    __extends(ConfigurationApi, _super);
    function ConfigurationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the economy configuration for the player with any overrides applied.
     * @summary Get player\'s configuration
     * @param {ConfigurationApiGetPlayerConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationApi
     */
    ConfigurationApi.prototype.getPlayerConfiguration = function (requestParameters, options) {
        var _this = this;
        return exports.ConfigurationApiFp(this.configuration)
            .getPlayerConfiguration(requestParameters.projectId, requestParameters.playerId, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfigurationApi;
}(base_1.BaseAPI));
exports.ConfigurationApi = ConfigurationApi;
/**
 * CurrenciesApi - axios parameter creator
 * @export
 */
exports.CurrenciesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Decrements a player\'s currency balance by a given value.
         * @summary Decrement currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("decrementPlayerCurrencyBalance", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("decrementPlayerCurrencyBalance", "playerId", playerId);
                            // verify required parameter 'currencyId' is not null or undefined
                            common_1.assertParamExists("decrementPlayerCurrencyBalance", "currencyId", currencyId);
                            // verify required parameter 'currencyModifyBalanceRequest' is not null or undefined
                            common_1.assertParamExists("decrementPlayerCurrencyBalance", "currencyModifyBalanceRequest", currencyModifyBalanceRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/currencies/{currencyId}/decrement"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)))
                                .replace("{" + "currencyId" + "}", encodeURIComponent(String(currencyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(currencyModifyBalanceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of currency balances for a player. Results ordered in ascending currency ID.
         * @summary Player currency balances
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The currency ID after which to retrieve the next page of balances.
         * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerCurrencies: function (projectId, playerId, configAssignmentHash, after, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("getPlayerCurrencies", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("getPlayerCurrencies", "playerId", playerId);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/currencies"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter["limit"] = limit;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Increment a player\'s currency balance by a given value.
         * @summary Increment currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("incrementPlayerCurrencyBalance", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("incrementPlayerCurrencyBalance", "playerId", playerId);
                            // verify required parameter 'currencyId' is not null or undefined
                            common_1.assertParamExists("incrementPlayerCurrencyBalance", "currencyId", currencyId);
                            // verify required parameter 'currencyModifyBalanceRequest' is not null or undefined
                            common_1.assertParamExists("incrementPlayerCurrencyBalance", "currencyModifyBalanceRequest", currencyModifyBalanceRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/currencies/{currencyId}/increment"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)))
                                .replace("{" + "currencyId" + "}", encodeURIComponent(String(currencyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(currencyModifyBalanceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Set a player\'s currency balance.
         * @summary Set currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyBalanceRequest} currencyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyBalanceRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("setPlayerCurrencyBalance", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("setPlayerCurrencyBalance", "playerId", playerId);
                            // verify required parameter 'currencyId' is not null or undefined
                            common_1.assertParamExists("setPlayerCurrencyBalance", "currencyId", currencyId);
                            // verify required parameter 'currencyBalanceRequest' is not null or undefined
                            common_1.assertParamExists("setPlayerCurrencyBalance", "currencyBalanceRequest", currencyBalanceRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/currencies/{currencyId}"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)))
                                .replace("{" + "currencyId" + "}", encodeURIComponent(String(currencyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(currencyBalanceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CurrenciesApi - functional programming interface
 * @export
 */
exports.CurrenciesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CurrenciesApiAxiosParamCreator(configuration);
    return {
        /**
         * Decrements a player\'s currency balance by a given value.
         * @summary Decrement currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.decrementPlayerCurrencyBalance(projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of currency balances for a player. Results ordered in ascending currency ID.
         * @summary Player currency balances
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The currency ID after which to retrieve the next page of balances.
         * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerCurrencies: function (projectId, playerId, configAssignmentHash, after, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlayerCurrencies(projectId, playerId, configAssignmentHash, after, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Increment a player\'s currency balance by a given value.
         * @summary Increment currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.incrementPlayerCurrencyBalance(projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Set a player\'s currency balance.
         * @summary Set currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyBalanceRequest} currencyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyBalanceRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPlayerCurrencyBalance(projectId, playerId, currencyId, currencyBalanceRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CurrenciesApi - factory interface
 * @export
 */
exports.CurrenciesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CurrenciesApiFp(configuration);
    return {
        /**
         * Decrements a player\'s currency balance by a given value.
         * @summary Decrement currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            return localVarFp
                .decrementPlayerCurrencyBalance(projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of currency balances for a player. Results ordered in ascending currency ID.
         * @summary Player currency balances
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The currency ID after which to retrieve the next page of balances.
         * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerCurrencies: function (projectId, playerId, configAssignmentHash, after, limit, options) {
            return localVarFp
                .getPlayerCurrencies(projectId, playerId, configAssignmentHash, after, limit, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Increment a player\'s currency balance by a given value.
         * @summary Increment currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options) {
            return localVarFp
                .incrementPlayerCurrencyBalance(projectId, playerId, currencyId, currencyModifyBalanceRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Set a player\'s currency balance.
         * @summary Set currency balance
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} currencyId Resource ID of the currency.
         * @param {CurrencyBalanceRequest} currencyBalanceRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPlayerCurrencyBalance: function (projectId, playerId, currencyId, currencyBalanceRequest, configAssignmentHash, options) {
            return localVarFp
                .setPlayerCurrencyBalance(projectId, playerId, currencyId, currencyBalanceRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CurrenciesApi - object-oriented interface
 * @export
 * @class CurrenciesApi
 * @extends {BaseAPI}
 */
var CurrenciesApi = /** @class */ (function (_super) {
    __extends(CurrenciesApi, _super);
    function CurrenciesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Decrements a player\'s currency balance by a given value.
     * @summary Decrement currency balance
     * @param {CurrenciesApiDecrementPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    CurrenciesApi.prototype.decrementPlayerCurrencyBalance = function (requestParameters, options) {
        var _this = this;
        return exports.CurrenciesApiFp(this.configuration)
            .decrementPlayerCurrencyBalance(requestParameters.projectId, requestParameters.playerId, requestParameters.currencyId, requestParameters.currencyModifyBalanceRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of currency balances for a player. Results ordered in ascending currency ID.
     * @summary Player currency balances
     * @param {CurrenciesApiGetPlayerCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    CurrenciesApi.prototype.getPlayerCurrencies = function (requestParameters, options) {
        var _this = this;
        return exports.CurrenciesApiFp(this.configuration)
            .getPlayerCurrencies(requestParameters.projectId, requestParameters.playerId, requestParameters.configAssignmentHash, requestParameters.after, requestParameters.limit, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Increment a player\'s currency balance by a given value.
     * @summary Increment currency balance
     * @param {CurrenciesApiIncrementPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    CurrenciesApi.prototype.incrementPlayerCurrencyBalance = function (requestParameters, options) {
        var _this = this;
        return exports.CurrenciesApiFp(this.configuration)
            .incrementPlayerCurrencyBalance(requestParameters.projectId, requestParameters.playerId, requestParameters.currencyId, requestParameters.currencyModifyBalanceRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Set a player\'s currency balance.
     * @summary Set currency balance
     * @param {CurrenciesApiSetPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    CurrenciesApi.prototype.setPlayerCurrencyBalance = function (requestParameters, options) {
        var _this = this;
        return exports.CurrenciesApiFp(this.configuration)
            .setPlayerCurrencyBalance(requestParameters.projectId, requestParameters.playerId, requestParameters.currencyId, requestParameters.currencyBalanceRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CurrenciesApi;
}(base_1.BaseAPI));
exports.CurrenciesApi = CurrenciesApi;
/**
 * InventoryApi - axios parameter creator
 * @export
 */
exports.InventoryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add an item to a player\'s inventory.
         * @summary Add inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {AddInventoryRequest} addInventoryRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryItem: function (projectId, playerId, addInventoryRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("addInventoryItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("addInventoryItem", "playerId", playerId);
                            // verify required parameter 'addInventoryRequest' is not null or undefined
                            common_1.assertParamExists("addInventoryItem", "addInventoryRequest", addInventoryRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/inventory"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(addInventoryRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a player\'s inventory item.
         * @summary Delete player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryDeleteRequest} inventoryDeleteRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryDeleteRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("deleteInventoryItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("deleteInventoryItem", "playerId", playerId);
                            // verify required parameter 'playersInventoryItemId' is not null or undefined
                            common_1.assertParamExists("deleteInventoryItem", "playersInventoryItemId", playersInventoryItemId);
                            // verify required parameter 'inventoryDeleteRequest' is not null or undefined
                            common_1.assertParamExists("deleteInventoryItem", "inventoryDeleteRequest", inventoryDeleteRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/inventory/{playersInventoryItemId}"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)))
                                .replace("{" + "playersInventoryItemId" + "}", encodeURIComponent(String(playersInventoryItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inventoryDeleteRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of inventory for a player. Results ordered by ascending `playersInventoryItemId`. `playersIventoryItemIds` and `inventoryItemIds` filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
         * @summary List player inventory
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The &#x60;playersInventoryItemId&#x60; after which to retrieve the next page of balances.
         * @param {number} [limit] Number of items to be returned. Defaults to 20.
         * @param {Array<string>} [playersInventoryItemIds] List of &#x60;playersInventoryItemIds&#x60; in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {Array<string>} [inventoryItemIds] List of inventory item IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerInventory: function (projectId, playerId, configAssignmentHash, after, limit, playersInventoryItemIds, inventoryItemIds, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("getPlayerInventory", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("getPlayerInventory", "playerId", playerId);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/inventory"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            if (after !== undefined) {
                                localVarQueryParameter["after"] = after;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter["limit"] = limit;
                            }
                            if (playersInventoryItemIds) {
                                localVarQueryParameter["playersInventoryItemIds"] =
                                    playersInventoryItemIds;
                            }
                            if (inventoryItemIds) {
                                localVarQueryParameter["inventoryItemIds"] = inventoryItemIds;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a player\'s inventory item.
         * @summary Update player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryRequestUpdate} inventoryRequestUpdate
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryRequestUpdate, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("updateInventoryItem", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("updateInventoryItem", "playerId", playerId);
                            // verify required parameter 'playersInventoryItemId' is not null or undefined
                            common_1.assertParamExists("updateInventoryItem", "playersInventoryItemId", playersInventoryItemId);
                            // verify required parameter 'inventoryRequestUpdate' is not null or undefined
                            common_1.assertParamExists("updateInventoryItem", "inventoryRequestUpdate", inventoryRequestUpdate);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/inventory/{playersInventoryItemId}"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)))
                                .replace("{" + "playersInventoryItemId" + "}", encodeURIComponent(String(playersInventoryItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "PUT" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(inventoryRequestUpdate, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * InventoryApi - functional programming interface
 * @export
 */
exports.InventoryApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.InventoryApiAxiosParamCreator(configuration);
    return {
        /**
         * Add an item to a player\'s inventory.
         * @summary Add inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {AddInventoryRequest} addInventoryRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryItem: function (projectId, playerId, addInventoryRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addInventoryItem(projectId, playerId, addInventoryRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a player\'s inventory item.
         * @summary Delete player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryDeleteRequest} inventoryDeleteRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryDeleteRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteInventoryItem(projectId, playerId, playersInventoryItemId, inventoryDeleteRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of inventory for a player. Results ordered by ascending `playersInventoryItemId`. `playersIventoryItemIds` and `inventoryItemIds` filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
         * @summary List player inventory
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The &#x60;playersInventoryItemId&#x60; after which to retrieve the next page of balances.
         * @param {number} [limit] Number of items to be returned. Defaults to 20.
         * @param {Array<string>} [playersInventoryItemIds] List of &#x60;playersInventoryItemIds&#x60; in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {Array<string>} [inventoryItemIds] List of inventory item IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerInventory: function (projectId, playerId, configAssignmentHash, after, limit, playersInventoryItemIds, inventoryItemIds, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPlayerInventory(projectId, playerId, configAssignmentHash, after, limit, playersInventoryItemIds, inventoryItemIds, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a player\'s inventory item.
         * @summary Update player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryRequestUpdate} inventoryRequestUpdate
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryRequestUpdate, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateInventoryItem(projectId, playerId, playersInventoryItemId, inventoryRequestUpdate, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * InventoryApi - factory interface
 * @export
 */
exports.InventoryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.InventoryApiFp(configuration);
    return {
        /**
         * Add an item to a player\'s inventory.
         * @summary Add inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {AddInventoryRequest} addInventoryRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventoryItem: function (projectId, playerId, addInventoryRequest, configAssignmentHash, options) {
            return localVarFp
                .addInventoryItem(projectId, playerId, addInventoryRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a player\'s inventory item.
         * @summary Delete player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryDeleteRequest} inventoryDeleteRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryDeleteRequest, configAssignmentHash, options) {
            return localVarFp
                .deleteInventoryItem(projectId, playerId, playersInventoryItemId, inventoryDeleteRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of inventory for a player. Results ordered by ascending `playersInventoryItemId`. `playersIventoryItemIds` and `inventoryItemIds` filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
         * @summary List player inventory
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {string} [after] The &#x60;playersInventoryItemId&#x60; after which to retrieve the next page of balances.
         * @param {number} [limit] Number of items to be returned. Defaults to 20.
         * @param {Array<string>} [playersInventoryItemIds] List of &#x60;playersInventoryItemIds&#x60; in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {Array<string>} [inventoryItemIds] List of inventory item IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerInventory: function (projectId, playerId, configAssignmentHash, after, limit, playersInventoryItemIds, inventoryItemIds, options) {
            return localVarFp
                .getPlayerInventory(projectId, playerId, configAssignmentHash, after, limit, playersInventoryItemIds, inventoryItemIds, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a player\'s inventory item.
         * @summary Update player\'s inventory item
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {string} playersInventoryItemId The &#x60;playersInventoryItemId&#x60; of the item to be updated.
         * @param {InventoryRequestUpdate} inventoryRequestUpdate
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventoryItem: function (projectId, playerId, playersInventoryItemId, inventoryRequestUpdate, configAssignmentHash, options) {
            return localVarFp
                .updateInventoryItem(projectId, playerId, playersInventoryItemId, inventoryRequestUpdate, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
var InventoryApi = /** @class */ (function (_super) {
    __extends(InventoryApi, _super);
    function InventoryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add an item to a player\'s inventory.
     * @summary Add inventory item
     * @param {InventoryApiAddInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.addInventoryItem = function (requestParameters, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration)
            .addInventoryItem(requestParameters.projectId, requestParameters.playerId, requestParameters.addInventoryRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a player\'s inventory item.
     * @summary Delete player\'s inventory item
     * @param {InventoryApiDeleteInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.deleteInventoryItem = function (requestParameters, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration)
            .deleteInventoryItem(requestParameters.projectId, requestParameters.playerId, requestParameters.playersInventoryItemId, requestParameters.inventoryDeleteRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of inventory for a player. Results ordered by ascending `playersInventoryItemId`. `playersIventoryItemIds` and `inventoryItemIds` filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
     * @summary List player inventory
     * @param {InventoryApiGetPlayerInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.getPlayerInventory = function (requestParameters, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration)
            .getPlayerInventory(requestParameters.projectId, requestParameters.playerId, requestParameters.configAssignmentHash, requestParameters.after, requestParameters.limit, requestParameters.playersInventoryItemIds, requestParameters.inventoryItemIds, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a player\'s inventory item.
     * @summary Update player\'s inventory item
     * @param {InventoryApiUpdateInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    InventoryApi.prototype.updateInventoryItem = function (requestParameters, options) {
        var _this = this;
        return exports.InventoryApiFp(this.configuration)
            .updateInventoryItem(requestParameters.projectId, requestParameters.playerId, requestParameters.playersInventoryItemId, requestParameters.inventoryRequestUpdate, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InventoryApi;
}(base_1.BaseAPI));
exports.InventoryApi = InventoryApi;
/**
 * PurchasesApi - axios parameter creator
 * @export
 */
exports.PurchasesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Make a virtual purchase for a player.
         * @summary Make virtual purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeVirtualPurchase: function (projectId, playerId, playerPurchaseVirtualRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("makeVirtualPurchase", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("makeVirtualPurchase", "playerId", playerId);
                            // verify required parameter 'playerPurchaseVirtualRequest' is not null or undefined
                            common_1.assertParamExists("makeVirtualPurchase", "playerPurchaseVirtualRequest", playerPurchaseVirtualRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/purchases/virtual"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(playerPurchaseVirtualRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Redeem an Apple App Store purchase for a player.
         * @summary Redeem Apple App Store purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemAppleAppStorePurchase: function (projectId, playerId, playerPurchaseAppleappstoreRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("redeemAppleAppStorePurchase", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("redeemAppleAppStorePurchase", "playerId", playerId);
                            // verify required parameter 'playerPurchaseAppleappstoreRequest' is not null or undefined
                            common_1.assertParamExists("redeemAppleAppStorePurchase", "playerPurchaseAppleappstoreRequest", playerPurchaseAppleappstoreRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/purchases/appleappstore"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(playerPurchaseAppleappstoreRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Redeem a Google Play store purchase for a player.
         * @summary Redeem Google Play purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemGooglePlayPurchase: function (projectId, playerId, playerPurchaseGoogleplaystoreRequest, configAssignmentHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            common_1.assertParamExists("redeemGooglePlayPurchase", "projectId", projectId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("redeemGooglePlayPurchase", "playerId", playerId);
                            // verify required parameter 'playerPurchaseGoogleplaystoreRequest' is not null or undefined
                            common_1.assertParamExists("redeemGooglePlayPurchase", "playerPurchaseGoogleplaystoreRequest", playerPurchaseGoogleplaystoreRequest);
                            localVarPath = "/v2/projects/{projectId}/players/{playerId}/purchases/googleplaystore"
                                .replace("{" + "projectId" + "}", encodeURIComponent(String(projectId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            if (configAssignmentHash !== undefined) {
                                localVarQueryParameter["configAssignmentHash"] = configAssignmentHash;
                            }
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(playerPurchaseGoogleplaystoreRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PurchasesApi - functional programming interface
 * @export
 */
exports.PurchasesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PurchasesApiAxiosParamCreator(configuration);
    return {
        /**
         * Make a virtual purchase for a player.
         * @summary Make virtual purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeVirtualPurchase: function (projectId, playerId, playerPurchaseVirtualRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.makeVirtualPurchase(projectId, playerId, playerPurchaseVirtualRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Redeem an Apple App Store purchase for a player.
         * @summary Redeem Apple App Store purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemAppleAppStorePurchase: function (projectId, playerId, playerPurchaseAppleappstoreRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.redeemAppleAppStorePurchase(projectId, playerId, playerPurchaseAppleappstoreRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Redeem a Google Play store purchase for a player.
         * @summary Redeem Google Play purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemGooglePlayPurchase: function (projectId, playerId, playerPurchaseGoogleplaystoreRequest, configAssignmentHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.redeemGooglePlayPurchase(projectId, playerId, playerPurchaseGoogleplaystoreRequest, configAssignmentHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PurchasesApi - factory interface
 * @export
 */
exports.PurchasesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PurchasesApiFp(configuration);
    return {
        /**
         * Make a virtual purchase for a player.
         * @summary Make virtual purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeVirtualPurchase: function (projectId, playerId, playerPurchaseVirtualRequest, configAssignmentHash, options) {
            return localVarFp
                .makeVirtualPurchase(projectId, playerId, playerPurchaseVirtualRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Redeem an Apple App Store purchase for a player.
         * @summary Redeem Apple App Store purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemAppleAppStorePurchase: function (projectId, playerId, playerPurchaseAppleappstoreRequest, configAssignmentHash, options) {
            return localVarFp
                .redeemAppleAppStorePurchase(projectId, playerId, playerPurchaseAppleappstoreRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Redeem a Google Play store purchase for a player.
         * @summary Redeem Google Play purchase
         * @param {string} projectId ID of the project.
         * @param {string} playerId ID of the player.
         * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
         * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemGooglePlayPurchase: function (projectId, playerId, playerPurchaseGoogleplaystoreRequest, configAssignmentHash, options) {
            return localVarFp
                .redeemGooglePlayPurchase(projectId, playerId, playerPurchaseGoogleplaystoreRequest, configAssignmentHash, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PurchasesApi - object-oriented interface
 * @export
 * @class PurchasesApi
 * @extends {BaseAPI}
 */
var PurchasesApi = /** @class */ (function (_super) {
    __extends(PurchasesApi, _super);
    function PurchasesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Make a virtual purchase for a player.
     * @summary Make virtual purchase
     * @param {PurchasesApiMakeVirtualPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    PurchasesApi.prototype.makeVirtualPurchase = function (requestParameters, options) {
        var _this = this;
        return exports.PurchasesApiFp(this.configuration)
            .makeVirtualPurchase(requestParameters.projectId, requestParameters.playerId, requestParameters.playerPurchaseVirtualRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Redeem an Apple App Store purchase for a player.
     * @summary Redeem Apple App Store purchase
     * @param {PurchasesApiRedeemAppleAppStorePurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    PurchasesApi.prototype.redeemAppleAppStorePurchase = function (requestParameters, options) {
        var _this = this;
        return exports.PurchasesApiFp(this.configuration)
            .redeemAppleAppStorePurchase(requestParameters.projectId, requestParameters.playerId, requestParameters.playerPurchaseAppleappstoreRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Redeem a Google Play store purchase for a player.
     * @summary Redeem Google Play purchase
     * @param {PurchasesApiRedeemGooglePlayPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    PurchasesApi.prototype.redeemGooglePlayPurchase = function (requestParameters, options) {
        var _this = this;
        return exports.PurchasesApiFp(this.configuration)
            .redeemGooglePlayPurchase(requestParameters.projectId, requestParameters.playerId, requestParameters.playerPurchaseGoogleplaystoreRequest, requestParameters.configAssignmentHash, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PurchasesApi;
}(base_1.BaseAPI));
exports.PurchasesApi = PurchasesApi;
