/**
 * Economy API
 * # Introduction   This document outlines the API specification for the Economy API.   The Economy service allows the game client to retrieve and modify a player\'s economy resources in the cloud. ### Notes about the beta version   During the beta period, Unity cannot guarantee the information in this document.  # Concepts   ## Resources   Economy currently allows interaction with the following types of Resources:   - Currencies: A resource that, when defined, contains two parameters: Initial and Max. The Initial parameter determines how much of the Currency a game assigns to a player upon first interacting with the Economy system. The Max parameter determines how much of the Currency the player is allowed to have.   - Inventory Items: A resource that doesn\'t have any set parameters; its intended use is to indicate the ownership or acquisition of an Item in game, for example, Sword and Shield.     A game client can add, remove or update the associated data of an instance of a configured Inventory Item from the player\'s inventory.   - Virtual Purchases: A transactional resource to implement a shop or trade feature. Allows the player to buy Items/Currencies using the previously defined Currencies or Inventory Items.     A game client can redeem a Virtual Purchase and the player\'s account updates with the Rewards if the Costs criteria are met.   - Real Money Purchases: A transactional resource with the intended use to facilitate a shop or trade feature. Allows the player to buy any amount of Items/Currencies through an in-app purchase. Only ever uses the previously defined Currencies or Inventory Items.     A game client can redeem a Real Money Purchase and the player\'s account will be updated with the \"Rewards\".      The above resources also have an optional Custom Data parameter that can be populated with JSON data from the dashboard to allow bespoke data to be read by game clients.   ## Writelock   The WriteLock is an integer that is automatically incremented serverside whenever a request that changes the stored value of a player\'s account or inventory.   The purpose of the WriteLock is to help prevent requests from the same or other game clients happening out-of-sync.   This parameter is optional, but when supplied with a request, the service does a comparison with the stored WriteLock on the server, and on mismatch returns an error.   ## Rate Limits   The API has rate limiting in place. Requests are limited on a per-player basis up to 60 requests per minute.   The API responds with a `429` HTTP status code if the requests exceed the rate limit.   Responses with a `429` status code include a `Retry-After` header to be used in conjunction with a client\'s retry logic, the value is the number of seconds until a request for the given player is accepted.
 *
 * The version of the OpenAPI document: 2.0-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosInstance, AxiosRequestConfig } from "axios";
export declare const BASE_PATH: string;
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
