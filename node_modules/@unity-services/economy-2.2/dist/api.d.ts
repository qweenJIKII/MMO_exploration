/**
 * Economy API
 * # Introduction   This document outlines the API specification for the Economy API.   The Economy service allows the game client to retrieve and modify a player\'s economy resources in the cloud. ### Notes about the beta version   During the beta period, Unity cannot guarantee the information in this document.  # Concepts   ## Resources   Economy currently allows interaction with the following types of Resources:   - Currencies: A resource that, when defined, contains two parameters: Initial and Max. The Initial parameter determines how much of the Currency a game assigns to a player upon first interacting with the Economy system. The Max parameter determines how much of the Currency the player is allowed to have.   - Inventory Items: A resource that doesn\'t have any set parameters; its intended use is to indicate the ownership or acquisition of an Item in game, for example, Sword and Shield.     A game client can add, remove or update the associated data of an instance of a configured Inventory Item from the player\'s inventory.   - Virtual Purchases: A transactional resource to implement a shop or trade feature. Allows the player to buy Items/Currencies using the previously defined Currencies or Inventory Items.     A game client can redeem a Virtual Purchase and the player\'s account updates with the Rewards if the Costs criteria are met.   - Real Money Purchases: A transactional resource with the intended use to facilitate a shop or trade feature. Allows the player to buy any amount of Items/Currencies through an in-app purchase. Only ever uses the previously defined Currencies or Inventory Items.     A game client can redeem a Real Money Purchase and the player\'s account will be updated with the \"Rewards\".      The above resources also have an optional Custom Data parameter that can be populated with JSON data from the dashboard to allow bespoke data to be read by game clients.   ## Writelock   The WriteLock is an integer that is automatically incremented serverside whenever a request that changes the stored value of a player\'s account or inventory.   The purpose of the WriteLock is to help prevent requests from the same or other game clients happening out-of-sync.   This parameter is optional, but when supplied with a request, the service does a comparison with the stored WriteLock on the server, and on mismatch returns an error.   ## Rate Limits   The API has rate limiting in place. Requests are limited on a per-player basis up to 60 requests per minute.   The API responds with a `429` HTTP status code if the requests exceed the rate limit.   Responses with a `429` status code include a `Retry-After` header to be used in conjunction with a client\'s retry logic, the value is the number of seconds until a request for the given player is accepted.
 *
 * The version of the OpenAPI document: 2.0-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from "./base";
/**
 *
 * @export
 * @interface AddInventoryRequest
 */
export interface AddInventoryRequest {
    /**
     * Resource ID of the config Inventory Item.
     * @type {string}
     * @memberof AddInventoryRequest
     */
    inventoryItemId: string;
    /**
     * Players Inventory Item ID for the item being created. If not given, Economy automatically generates the ID. An ID must be unique for a player.
     * @type {string}
     * @memberof AddInventoryRequest
     */
    playersInventoryItemId?: string;
    /**
     * Instance data to be saved against the new Inventory Item. Max size when serialized 5 KB.
     * @type {object}
     * @memberof AddInventoryRequest
     */
    instanceData?: object | null;
}
/**
 * Referenced from - https://tools.ietf.org/html/rfc7807#page-3 Consumers MUST use the \'type\' string as the primary identifier for the problem type; the \'title\' string is advisory and included only for users who are not aware of the semantics of the URI and do not have the ability to discover them (for example, offline log analysis). Consumers SHOULD NOT automatically dereference the type URI. The \"status\" member, if present, is only advisory; it conveys the HTTP status code used for the convenience of the consumer. Generators MUST use the same status code in the actual HTTP response, to assure that generic HTTP software that does not understand this format still behaves correctly.  See Section 5 for further caveats regarding its use. Consumers can use the status member to determine what the original status code used by the generator was, in cases where it has been changed (for example, by an intermediary or cache), and when message bodies persist without HTTP information.  Generic HTTP software will still use the HTTP status code. The \"detail\" member, if present, ought to focus on helping the client correct the problem, rather than giving debugging information.
 * @export
 * @interface BasicErrorResponse
 */
export interface BasicErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (for example, using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be \"about:blank\".
     * @type {string}
     * @memberof BasicErrorResponse
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (for example, using proactive content negotiation; see [RFC7231], Section 3.4).
     * @type {string}
     * @memberof BasicErrorResponse
     */
    title?: string;
    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof BasicErrorResponse
     */
    status?: number;
    /**
     * Service specific error code.
     * @type {number}
     * @memberof BasicErrorResponse
     */
    code?: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof BasicErrorResponse
     */
    detail?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof BasicErrorResponse
     */
    instance?: string;
    /**
     * Machine readable service specific errors.
     * @type {Array<object>}
     * @memberof BasicErrorResponse
     */
    details?: Array<object>;
}
/**
 *
 * @export
 * @interface CurrencyBalanceRequest
 */
export interface CurrencyBalanceRequest {
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrencyBalanceRequest
     */
    currencyId: string;
    /**
     * The player\'s balance.
     * @type {number}
     * @memberof CurrencyBalanceRequest
     */
    balance: number;
    /**
     * The write lock for the Currency balance.
     * @type {string}
     * @memberof CurrencyBalanceRequest
     */
    writeLock?: string;
}
/**
 *
 * @export
 * @interface CurrencyBalanceResponse
 */
export interface CurrencyBalanceResponse {
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrencyBalanceResponse
     */
    currencyId: string;
    /**
     * The player\'s balance.
     * @type {number}
     * @memberof CurrencyBalanceResponse
     */
    balance: number;
    /**
     * The write lock for the Currency balance.
     * @type {string}
     * @memberof CurrencyBalanceResponse
     */
    writeLock: string;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof CurrencyBalanceResponse
     */
    created: ModifiedMetadata;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof CurrencyBalanceResponse
     */
    modified: ModifiedMetadata;
}
/**
 *
 * @export
 * @interface CurrencyExchangeItem
 */
export interface CurrencyExchangeItem {
    /**
     * ID of the Currency.
     * @type {string}
     * @memberof CurrencyExchangeItem
     */
    id: string;
    /**
     * Amount of Currency added or deducted.
     * @type {number}
     * @memberof CurrencyExchangeItem
     */
    amount: number;
}
/**
 *
 * @export
 * @interface CurrencyModifyBalanceRequest
 */
export interface CurrencyModifyBalanceRequest {
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrencyModifyBalanceRequest
     */
    currencyId: string;
    /**
     * The value by which to increment or decrement. Zero is allowed but will result in no change to the Currency balance.
     * @type {number}
     * @memberof CurrencyModifyBalanceRequest
     */
    amount: number;
    /**
     * The write lock for the Currency balance.
     * @type {string}
     * @memberof CurrencyModifyBalanceRequest
     */
    writeLock?: string;
}
/**
 * An error response sent back upon Currency balance conflict.
 * @export
 * @interface ErrorResponseConflictCurrencyBalance
 */
export interface ErrorResponseConflictCurrencyBalance {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    title: string;
    /**
     * e.g. 409
     * @type {number}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    instance?: string;
    /**
     *
     * @type {ErrorResponseConflictCurrencyBalanceData}
     * @memberof ErrorResponseConflictCurrencyBalance
     */
    data: ErrorResponseConflictCurrencyBalanceData;
}
/**
 *
 * @export
 * @interface ErrorResponseConflictCurrencyBalanceData
 */
export interface ErrorResponseConflictCurrencyBalanceData {
    /**
     *
     * @type {CurrencyBalanceRequest}
     * @memberof ErrorResponseConflictCurrencyBalanceData
     */
    attempted: CurrencyBalanceRequest;
    /**
     *
     * @type {CurrencyBalanceResponse}
     * @memberof ErrorResponseConflictCurrencyBalanceData
     */
    existing: CurrencyBalanceResponse | null;
}
/**
 * An error response sent back upon player Inventory Item conflict.
 * @export
 * @interface ErrorResponseConflictInventory
 */
export interface ErrorResponseConflictInventory {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventory
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventory
     */
    title: string;
    /**
     * e.g 409
     * @type {number}
     * @memberof ErrorResponseConflictInventory
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponseConflictInventory
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventory
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventory
     */
    instance?: string;
    /**
     *
     * @type {ErrorResponseConflictInventoryUpdateData}
     * @memberof ErrorResponseConflictInventory
     */
    data: ErrorResponseConflictInventoryUpdateData;
}
/**
 * An error response sent back upon player Inventory Item conflict.
 * @export
 * @interface ErrorResponseConflictInventoryDelete
 */
export interface ErrorResponseConflictInventoryDelete {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    title: string;
    /**
     * e.g 409
     * @type {number}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    instance?: string;
    /**
     *
     * @type {ErrorResponseConflictInventoryDeleteData}
     * @memberof ErrorResponseConflictInventoryDelete
     */
    data: ErrorResponseConflictInventoryDeleteData;
}
/**
 *
 * @export
 * @interface ErrorResponseConflictInventoryDeleteData
 */
export interface ErrorResponseConflictInventoryDeleteData {
    /**
     *
     * @type {InventoryDeleteRequest}
     * @memberof ErrorResponseConflictInventoryDeleteData
     */
    attempted: InventoryDeleteRequest;
    /**
     *
     * @type {InventoryResponse}
     * @memberof ErrorResponseConflictInventoryDeleteData
     */
    existing: InventoryResponse;
}
/**
 * An error response sent back upon player Inventory Item conflict.
 * @export
 * @interface ErrorResponseConflictInventoryUpdate
 */
export interface ErrorResponseConflictInventoryUpdate {
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    title: string;
    /**
     * e.g 409
     * @type {number}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    instance?: string;
    /**
     *
     * @type {ErrorResponseConflictInventoryUpdateData}
     * @memberof ErrorResponseConflictInventoryUpdate
     */
    data: ErrorResponseConflictInventoryUpdateData;
}
/**
 *
 * @export
 * @interface ErrorResponseConflictInventoryUpdateData
 */
export interface ErrorResponseConflictInventoryUpdateData {
    /**
     *
     * @type {AddInventoryRequest}
     * @memberof ErrorResponseConflictInventoryUpdateData
     */
    attempted: AddInventoryRequest;
    /**
     *
     * @type {InventoryResponse}
     * @memberof ErrorResponseConflictInventoryUpdateData
     */
    existing: InventoryResponse | null;
}
/**
 * An error response sent back upon a redeem Apple App Store purchase.
 * @export
 * @interface ErrorResponsePurchaseAppleappstoreFailed
 */
export interface ErrorResponsePurchaseAppleappstoreFailed {
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    title: string;
    /**
     * e.g 409
     * @type {number}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    instance?: string;
    /**
     *
     * @type {PlayerPurchaseAppleappstoreResponse}
     * @memberof ErrorResponsePurchaseAppleappstoreFailed
     */
    data: PlayerPurchaseAppleappstoreResponse;
}
/**
 * An error response sent back upon a redeem Google Play purchase.
 * @export
 * @interface ErrorResponsePurchaseGoogleplaystoreFailed
 */
export interface ErrorResponsePurchaseGoogleplaystoreFailed {
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    title: string;
    /**
     * e.g 409
     * @type {number}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    status: number;
    /**
     * e.g. 10204
     * @type {number}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    instance?: string;
    /**
     *
     * @type {PlayerPurchaseGoogleplaystoreResponse}
     * @memberof ErrorResponsePurchaseGoogleplaystoreFailed
     */
    data: PlayerPurchaseGoogleplaystoreResponse;
}
/**
 *
 * @export
 * @interface InventoryDeleteRequest
 */
export interface InventoryDeleteRequest {
    /**
     * The write lock for the inventory instance.
     * @type {string}
     * @memberof InventoryDeleteRequest
     */
    writeLock?: string;
}
/**
 *
 * @export
 * @interface InventoryExchangeItem
 */
export interface InventoryExchangeItem {
    /**
     * ID of the Inventory Item.
     * @type {string}
     * @memberof InventoryExchangeItem
     */
    id: string;
    /**
     * Number of player Inventory Items.
     * @type {number}
     * @memberof InventoryExchangeItem
     */
    amount: number;
    /**
     * Player\'s Inventory Item IDs for the player\'s items to be added or removed.
     * @type {Set<string>}
     * @memberof InventoryExchangeItem
     */
    playersInventoryItemIds: Set<string>;
}
/**
 *
 * @export
 * @interface InventoryRequestUpdate
 */
export interface InventoryRequestUpdate {
    /**
     * Instance data to be saved against the new Inventory Item. Max size when serialized 5 KB.
     * @type {object}
     * @memberof InventoryRequestUpdate
     */
    instanceData: object | null;
    /**
     * The write lock for the inventory instance.
     * @type {string}
     * @memberof InventoryRequestUpdate
     */
    writeLock?: string;
}
/**
 *
 * @export
 * @interface InventoryResponse
 */
export interface InventoryResponse {
    /**
     * ID of the player\'s Inventory Item.
     * @type {string}
     * @memberof InventoryResponse
     */
    playersInventoryItemId: string;
    /**
     * Resource ID of the config Inventory Item associated with this instance.
     * @type {string}
     * @memberof InventoryResponse
     */
    inventoryItemId: string;
    /**
     * Instance data. Max size when serialized 5 KB.
     * @type {object}
     * @memberof InventoryResponse
     */
    instanceData?: object | null;
    /**
     * The write lock for the inventory instance.
     * @type {string}
     * @memberof InventoryResponse
     */
    writeLock: string;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof InventoryResponse
     */
    created: ModifiedMetadata;
    /**
     *
     * @type {ModifiedMetadata}
     * @memberof InventoryResponse
     */
    modified: ModifiedMetadata;
}
/**
 *
 * @export
 * @interface ModifiedMetadata
 */
export interface ModifiedMetadata {
    /**
     * Date time in ISO 8601 format. Null if there is no associated value.
     * @type {string}
     * @memberof ModifiedMetadata
     */
    date: string | null;
}
/**
 *
 * @export
 * @interface PlayerCurrencyBalanceResponse
 */
export interface PlayerCurrencyBalanceResponse {
    /**
     * List of Currency balances.
     * @type {Array<CurrencyBalanceResponse>}
     * @memberof PlayerCurrencyBalanceResponse
     */
    results: Array<CurrencyBalanceResponse>;
    /**
     *
     * @type {PlayerCurrencyBalanceResponseLinks}
     * @memberof PlayerCurrencyBalanceResponse
     */
    links: PlayerCurrencyBalanceResponseLinks;
}
/**
 *
 * @export
 * @interface PlayerCurrencyBalanceResponseLinks
 */
export interface PlayerCurrencyBalanceResponseLinks {
    /**
     * Contains the URL path for requesting the next page of results. This value is null when there are no pages remaining.
     * @type {string}
     * @memberof PlayerCurrencyBalanceResponseLinks
     */
    next: string | null;
}
/**
 *
 * @export
 * @interface PlayerInventoryResponse
 */
export interface PlayerInventoryResponse {
    /**
     * List of player\'s Inventory Items.
     * @type {Array<InventoryResponse>}
     * @memberof PlayerInventoryResponse
     */
    results: Array<InventoryResponse>;
    /**
     *
     * @type {PlayerCurrencyBalanceResponseLinks}
     * @memberof PlayerInventoryResponse
     */
    links: PlayerCurrencyBalanceResponseLinks;
}
/**
 *
 * @export
 * @interface PlayerPurchaseAppleappstoreRequest
 */
export interface PlayerPurchaseAppleappstoreRequest {
    /**
     * ID of the purchase.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreRequest
     */
    id: string;
    /**
     * Receipt data returned from the Apple App Store as a result of a successful purchase. This should be base64 encoded.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreRequest
     */
    receipt: string;
    /**
     * The cost of the purchase as an integer in the minor Currency format, for example, $1.99 USD would be 199.
     * @type {number}
     * @memberof PlayerPurchaseAppleappstoreRequest
     */
    localCost: number;
    /**
     * The ISO-4217 Currency code with which the player purchased the IAP.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreRequest
     */
    localCurrency: string;
}
/**
 *
 * @export
 * @interface PlayerPurchaseAppleappstoreResponse
 */
export interface PlayerPurchaseAppleappstoreResponse {
    /**
     *
     * @type {PlayerPurchaseAppleappstoreResponseVerification}
     * @memberof PlayerPurchaseAppleappstoreResponse
     */
    verification: PlayerPurchaseAppleappstoreResponseVerification;
    /**
     *
     * @type {PlayerPurchaseVirtualResponseRewards}
     * @memberof PlayerPurchaseAppleappstoreResponse
     */
    rewards: PlayerPurchaseVirtualResponseRewards;
}
/**
 *
 * @export
 * @interface PlayerPurchaseAppleappstoreResponseVerification
 */
export interface PlayerPurchaseAppleappstoreResponseVerification {
    /**
     * Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, and had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreResponseVerification
     */
    status: PlayerPurchaseAppleappstoreResponseVerificationStatusEnum;
    /**
     *
     * @type {PlayerPurchaseAppleappstoreResponseVerificationStore}
     * @memberof PlayerPurchaseAppleappstoreResponseVerification
     */
    store: PlayerPurchaseAppleappstoreResponseVerificationStore;
}
export declare const PlayerPurchaseAppleappstoreResponseVerificationStatusEnum: {
    readonly Valid: "VALID";
    readonly ValidNotRedeemed: "VALID_NOT_REDEEMED";
    readonly InvalidAlreadyRedeemed: "INVALID_ALREADY_REDEEMED";
    readonly InvalidVerificationFailed: "INVALID_VERIFICATION_FAILED";
    readonly InvalidAnotherPlayer: "INVALID_ANOTHER_PLAYER";
    readonly InvalidConfiguration: "INVALID_CONFIGURATION";
    readonly InvalidProductIdMismatch: "INVALID_PRODUCT_ID_MISMATCH";
};
export declare type PlayerPurchaseAppleappstoreResponseVerificationStatusEnum = typeof PlayerPurchaseAppleappstoreResponseVerificationStatusEnum[keyof typeof PlayerPurchaseAppleappstoreResponseVerificationStatusEnum];
/**
 * Details from the receipt validation service.
 * @export
 * @interface PlayerPurchaseAppleappstoreResponseVerificationStore
 */
export interface PlayerPurchaseAppleappstoreResponseVerificationStore {
    /**
     * The status code sent back from the Apple App Store verification service.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreResponseVerificationStore
     */
    code: string | null;
    /**
     * A textual description of the returned status code.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreResponseVerificationStore
     */
    message: string | null;
    /**
     * The full response from the Apple App Store verification service as a JSON encoded string.
     * @type {string}
     * @memberof PlayerPurchaseAppleappstoreResponseVerificationStore
     */
    receipt: string | null;
}
/**
 *
 * @export
 * @interface PlayerPurchaseGoogleplaystoreRequest
 */
export interface PlayerPurchaseGoogleplaystoreRequest {
    /**
     * ID of the purchase.
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreRequest
     */
    id: string;
    /**
     * A JSON encoded string returned from a successful in-app billing purchase.
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreRequest
     */
    purchaseData: string;
    /**
     * A signature of the PurchaseData returned from a successful in-app billing purchase.
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreRequest
     */
    purchaseDataSignature: string;
    /**
     * The cost of the purchase as an integer in the minor Currency format, for example, $1.99 USD would be 199.
     * @type {number}
     * @memberof PlayerPurchaseGoogleplaystoreRequest
     */
    localCost: number;
    /**
     * The ISO-4217 Currency code with which the player purchased the IAP.
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreRequest
     */
    localCurrency: string;
}
/**
 *
 * @export
 * @interface PlayerPurchaseGoogleplaystoreResponse
 */
export interface PlayerPurchaseGoogleplaystoreResponse {
    /**
     *
     * @type {PlayerPurchaseGoogleplaystoreResponseVerification}
     * @memberof PlayerPurchaseGoogleplaystoreResponse
     */
    verification: PlayerPurchaseGoogleplaystoreResponseVerification;
    /**
     *
     * @type {PlayerPurchaseVirtualResponseRewards}
     * @memberof PlayerPurchaseGoogleplaystoreResponse
     */
    rewards: PlayerPurchaseVirtualResponseRewards;
}
/**
 *
 * @export
 * @interface PlayerPurchaseGoogleplaystoreResponseVerification
 */
export interface PlayerPurchaseGoogleplaystoreResponseVerification {
    /**
     * Status of the receipt verification. VALID: The purchase was valid. VALID_NOT_REDEEMED: The purchase was valid but seen before, and had not yet been redeemed. INVALID_ALREADY_REDEEMED: The purchase has already been redeemed. INVALID_VERIFICATION_FAILED: The receipt verification Service returned that the receipt data was not valid. INVALID_ANOTHER_PLAYER: The receipt has previously been used by a different player and validated. INVALID_CONFIGURATION: The service configuration is invalid, further information in the details section of the response. INVALID_PRODUCT_ID_MISMATCH: The purchase configuration store product identifier does not match the one in the receipt.
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreResponseVerification
     */
    status: PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum;
    /**
     *
     * @type {PlayerPurchaseGoogleplaystoreResponseVerificationStore}
     * @memberof PlayerPurchaseGoogleplaystoreResponseVerification
     */
    store: PlayerPurchaseGoogleplaystoreResponseVerificationStore;
}
export declare const PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum: {
    readonly Valid: "VALID";
    readonly ValidNotRedeemed: "VALID_NOT_REDEEMED";
    readonly InvalidAlreadyRedeemed: "INVALID_ALREADY_REDEEMED";
    readonly InvalidVerificationFailed: "INVALID_VERIFICATION_FAILED";
    readonly InvalidAnotherPlayer: "INVALID_ANOTHER_PLAYER";
    readonly InvalidConfiguration: "INVALID_CONFIGURATION";
    readonly InvalidProductIdMismatch: "INVALID_PRODUCT_ID_MISMATCH";
};
export declare type PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum = typeof PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum[keyof typeof PlayerPurchaseGoogleplaystoreResponseVerificationStatusEnum];
/**
 * Details from the receipt validation service.
 * @export
 * @interface PlayerPurchaseGoogleplaystoreResponseVerificationStore
 */
export interface PlayerPurchaseGoogleplaystoreResponseVerificationStore {
    /**
     * Receipt that was sent in the request
     * @type {string}
     * @memberof PlayerPurchaseGoogleplaystoreResponseVerificationStore
     */
    receipt?: string;
}
/**
 *
 * @export
 * @interface PlayerPurchaseVirtualRequest
 */
export interface PlayerPurchaseVirtualRequest {
    /**
     * ID of the purchase.
     * @type {string}
     * @memberof PlayerPurchaseVirtualRequest
     */
    id: string;
    /**
     * IDs of the player\'s Inventory Items that should be used for any item costs associated with the purchase.
     * @type {Set<string>}
     * @memberof PlayerPurchaseVirtualRequest
     */
    playersInventoryItemIds?: Set<string>;
}
/**
 *
 * @export
 * @interface PlayerPurchaseVirtualResponse
 */
export interface PlayerPurchaseVirtualResponse {
    /**
     *
     * @type {PlayerPurchaseVirtualResponseCosts}
     * @memberof PlayerPurchaseVirtualResponse
     */
    costs: PlayerPurchaseVirtualResponseCosts;
    /**
     *
     * @type {PlayerPurchaseVirtualResponseRewards}
     * @memberof PlayerPurchaseVirtualResponse
     */
    rewards: PlayerPurchaseVirtualResponseRewards;
}
/**
 * Costs of the purchase.
 * @export
 * @interface PlayerPurchaseVirtualResponseCosts
 */
export interface PlayerPurchaseVirtualResponseCosts {
    /**
     * Currency that was deducted in the purchase.
     * @type {Array<CurrencyExchangeItem>}
     * @memberof PlayerPurchaseVirtualResponseCosts
     */
    currency?: Array<CurrencyExchangeItem>;
    /**
     * Inventory that was deducted in the purchase.
     * @type {Array<InventoryExchangeItem>}
     * @memberof PlayerPurchaseVirtualResponseCosts
     */
    inventory: Array<InventoryExchangeItem>;
}
/**
 * Rewards of the purchase.
 * @export
 * @interface PlayerPurchaseVirtualResponseRewards
 */
export interface PlayerPurchaseVirtualResponseRewards {
    /**
     * Currency that was credited in the purchase.
     * @type {Array<CurrencyExchangeItem>}
     * @memberof PlayerPurchaseVirtualResponseRewards
     */
    currency?: Array<CurrencyExchangeItem>;
    /**
     * Inventory that was credited in the purchase.
     * @type {Array<InventoryExchangeItem>}
     * @memberof PlayerPurchaseVirtualResponseRewards
     */
    inventory: Array<InventoryExchangeItem>;
}
/**
 * Single error in the Validation Error Response.
 * @export
 * @interface ValidationErrorBody
 */
export interface ValidationErrorBody {
    /**
     *
     * @type {string}
     * @memberof ValidationErrorBody
     */
    field: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ValidationErrorBody
     */
    messages: Array<string>;
}
/**
 * Validation error response when a value provided from the client does not pass validation on server.
 * @export
 * @interface ValidationErrorResponse
 */
export interface ValidationErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    title: string;
    /**
     *
     * @type {number}
     * @memberof ValidationErrorResponse
     */
    status: number;
    /**
     *
     * @type {number}
     * @memberof ValidationErrorResponse
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    detail: string;
    /**
     *
     * @type {string}
     * @memberof ValidationErrorResponse
     */
    instance?: string;
    /**
     *
     * @type {Array<ValidationErrorBody>}
     * @memberof ValidationErrorResponse
     */
    errors: Array<ValidationErrorBody>;
}
/**
 * CurrenciesApi - axios parameter creator
 * @export
 */
export declare const CurrenciesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Decrements a player\'s Currency balance by a given value.
     * @summary Decrement Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    decrementPlayerCurrencyBalance: (projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of Currency balances for a player. Results ordered in ascending Currency ID.
     * @summary Player Currency Balances
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerCurrencies: (projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Increment a player\'s Currency balance by a given value.
     * @summary Increment Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    incrementPlayerCurrencyBalance: (projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set a player\'s Currency balance.
     * @summary Set Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyBalanceRequest} currencyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPlayerCurrencyBalance: (projectId: string, playerId: string, currencyId: string, currencyBalanceRequest: CurrencyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CurrenciesApi - functional programming interface
 * @export
 */
export declare const CurrenciesApiFp: (configuration?: Configuration) => {
    /**
     * Decrements a player\'s Currency balance by a given value.
     * @summary Decrement Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    decrementPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyBalanceResponse>>;
    /**
     * Get a list of Currency balances for a player. Results ordered in ascending Currency ID.
     * @summary Player Currency Balances
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerCurrencies(projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerCurrencyBalanceResponse>>;
    /**
     * Increment a player\'s Currency balance by a given value.
     * @summary Increment Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    incrementPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyBalanceResponse>>;
    /**
     * Set a player\'s Currency balance.
     * @summary Set Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyBalanceRequest} currencyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyBalanceRequest: CurrencyBalanceRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyBalanceResponse>>;
};
/**
 * CurrenciesApi - factory interface
 * @export
 */
export declare const CurrenciesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Decrements a player\'s Currency balance by a given value.
     * @summary Decrement Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    decrementPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: any): AxiosPromise<CurrencyBalanceResponse>;
    /**
     * Get a list of Currency balances for a player. Results ordered in ascending Currency ID.
     * @summary Player Currency Balances
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of currencies to be returned. Defaults to 20.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerCurrencies(projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, options?: any): AxiosPromise<PlayerCurrencyBalanceResponse>;
    /**
     * Increment a player\'s Currency balance by a given value.
     * @summary Increment Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyModifyBalanceRequest} currencyModifyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    incrementPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyModifyBalanceRequest: CurrencyModifyBalanceRequest, configAssignmentHash?: string, options?: any): AxiosPromise<CurrencyBalanceResponse>;
    /**
     * Set a player\'s Currency balance.
     * @summary Set Currency Balance
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} currencyId Resource ID of the Currency.
     * @param {CurrencyBalanceRequest} currencyBalanceRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setPlayerCurrencyBalance(projectId: string, playerId: string, currencyId: string, currencyBalanceRequest: CurrencyBalanceRequest, configAssignmentHash?: string, options?: any): AxiosPromise<CurrencyBalanceResponse>;
};
/**
 * Request parameters for decrementPlayerCurrencyBalance operation in CurrenciesApi.
 * @export
 * @interface CurrenciesApiDecrementPlayerCurrencyBalanceRequest
 */
export interface CurrenciesApiDecrementPlayerCurrencyBalanceRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof CurrenciesApiDecrementPlayerCurrencyBalance
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof CurrenciesApiDecrementPlayerCurrencyBalance
     */
    readonly playerId: string;
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrenciesApiDecrementPlayerCurrencyBalance
     */
    readonly currencyId: string;
    /**
     *
     * @type {CurrencyModifyBalanceRequest}
     * @memberof CurrenciesApiDecrementPlayerCurrencyBalance
     */
    readonly currencyModifyBalanceRequest: CurrencyModifyBalanceRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof CurrenciesApiDecrementPlayerCurrencyBalance
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for getPlayerCurrencies operation in CurrenciesApi.
 * @export
 * @interface CurrenciesApiGetPlayerCurrenciesRequest
 */
export interface CurrenciesApiGetPlayerCurrenciesRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof CurrenciesApiGetPlayerCurrencies
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof CurrenciesApiGetPlayerCurrencies
     */
    readonly playerId: string;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof CurrenciesApiGetPlayerCurrencies
     */
    readonly configAssignmentHash?: string;
    /**
     * The ID after which to retrieve the next page of balances.
     * @type {string}
     * @memberof CurrenciesApiGetPlayerCurrencies
     */
    readonly after?: string;
    /**
     * Number of currencies to be returned. Defaults to 20.
     * @type {number}
     * @memberof CurrenciesApiGetPlayerCurrencies
     */
    readonly limit?: number;
}
/**
 * Request parameters for incrementPlayerCurrencyBalance operation in CurrenciesApi.
 * @export
 * @interface CurrenciesApiIncrementPlayerCurrencyBalanceRequest
 */
export interface CurrenciesApiIncrementPlayerCurrencyBalanceRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof CurrenciesApiIncrementPlayerCurrencyBalance
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof CurrenciesApiIncrementPlayerCurrencyBalance
     */
    readonly playerId: string;
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrenciesApiIncrementPlayerCurrencyBalance
     */
    readonly currencyId: string;
    /**
     *
     * @type {CurrencyModifyBalanceRequest}
     * @memberof CurrenciesApiIncrementPlayerCurrencyBalance
     */
    readonly currencyModifyBalanceRequest: CurrencyModifyBalanceRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof CurrenciesApiIncrementPlayerCurrencyBalance
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for setPlayerCurrencyBalance operation in CurrenciesApi.
 * @export
 * @interface CurrenciesApiSetPlayerCurrencyBalanceRequest
 */
export interface CurrenciesApiSetPlayerCurrencyBalanceRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof CurrenciesApiSetPlayerCurrencyBalance
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof CurrenciesApiSetPlayerCurrencyBalance
     */
    readonly playerId: string;
    /**
     * Resource ID of the Currency.
     * @type {string}
     * @memberof CurrenciesApiSetPlayerCurrencyBalance
     */
    readonly currencyId: string;
    /**
     *
     * @type {CurrencyBalanceRequest}
     * @memberof CurrenciesApiSetPlayerCurrencyBalance
     */
    readonly currencyBalanceRequest: CurrencyBalanceRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof CurrenciesApiSetPlayerCurrencyBalance
     */
    readonly configAssignmentHash?: string;
}
/**
 * CurrenciesApi - object-oriented interface
 * @export
 * @class CurrenciesApi
 * @extends {BaseAPI}
 */
export declare class CurrenciesApi extends BaseAPI {
    /**
     * Decrements a player\'s Currency balance by a given value.
     * @summary Decrement Currency Balance
     * @param {CurrenciesApiDecrementPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    decrementPlayerCurrencyBalance(requestParameters: CurrenciesApiDecrementPlayerCurrencyBalanceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrencyBalanceResponse>>;
    /**
     * Get a list of Currency balances for a player. Results ordered in ascending Currency ID.
     * @summary Player Currency Balances
     * @param {CurrenciesApiGetPlayerCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    getPlayerCurrencies(requestParameters: CurrenciesApiGetPlayerCurrenciesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlayerCurrencyBalanceResponse>>;
    /**
     * Increment a player\'s Currency balance by a given value.
     * @summary Increment Currency Balance
     * @param {CurrenciesApiIncrementPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    incrementPlayerCurrencyBalance(requestParameters: CurrenciesApiIncrementPlayerCurrencyBalanceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrencyBalanceResponse>>;
    /**
     * Set a player\'s Currency balance.
     * @summary Set Currency Balance
     * @param {CurrenciesApiSetPlayerCurrencyBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrenciesApi
     */
    setPlayerCurrencyBalance(requestParameters: CurrenciesApiSetPlayerCurrencyBalanceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrencyBalanceResponse>>;
}
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export declare const InventoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add an item to a player\'s inventory.
     * @summary Add Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {AddInventoryRequest} addInventoryRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryItem: (projectId: string, playerId: string, addInventoryRequest: AddInventoryRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a player\'s Inventory Item.
     * @summary Delete Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryDeleteRequest} inventoryDeleteRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventoryItem: (projectId: string, playerId: string, playersInventoryItemId: string, inventoryDeleteRequest: InventoryDeleteRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of inventory for a player. Results ordered by ascending Player\'s Inventory Item ID. Player\'s Inventory Item ID and Inventory Item ID filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
     * @summary List Player Inventory
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The Player\&#39;s Inventory Item ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of items to be returned. Defaults to 20.
     * @param {Array<string>} [playersInventoryItemIds] List of Player\&#39;s Inventory Item IDs in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {Array<string>} [inventoryItemIds] List of Inventory IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerInventory: (projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, playersInventoryItemIds?: Array<string>, inventoryItemIds?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a player\'s Inventory Item.
     * @summary Update Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryRequestUpdate} inventoryRequestUpdate
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventoryItem: (projectId: string, playerId: string, playersInventoryItemId: string, inventoryRequestUpdate: InventoryRequestUpdate, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InventoryApi - functional programming interface
 * @export
 */
export declare const InventoryApiFp: (configuration?: Configuration) => {
    /**
     * Add an item to a player\'s inventory.
     * @summary Add Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {AddInventoryRequest} addInventoryRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryItem(projectId: string, playerId: string, addInventoryRequest: AddInventoryRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryResponse>>;
    /**
     * Delete a player\'s Inventory Item.
     * @summary Delete Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryDeleteRequest} inventoryDeleteRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventoryItem(projectId: string, playerId: string, playersInventoryItemId: string, inventoryDeleteRequest: InventoryDeleteRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a list of inventory for a player. Results ordered by ascending Player\'s Inventory Item ID. Player\'s Inventory Item ID and Inventory Item ID filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
     * @summary List Player Inventory
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The Player\&#39;s Inventory Item ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of items to be returned. Defaults to 20.
     * @param {Array<string>} [playersInventoryItemIds] List of Player\&#39;s Inventory Item IDs in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {Array<string>} [inventoryItemIds] List of Inventory IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerInventory(projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, playersInventoryItemIds?: Array<string>, inventoryItemIds?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerInventoryResponse>>;
    /**
     * Update a player\'s Inventory Item.
     * @summary Update Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryRequestUpdate} inventoryRequestUpdate
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventoryItem(projectId: string, playerId: string, playersInventoryItemId: string, inventoryRequestUpdate: InventoryRequestUpdate, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryResponse>>;
};
/**
 * InventoryApi - factory interface
 * @export
 */
export declare const InventoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add an item to a player\'s inventory.
     * @summary Add Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {AddInventoryRequest} addInventoryRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryItem(projectId: string, playerId: string, addInventoryRequest: AddInventoryRequest, configAssignmentHash?: string, options?: any): AxiosPromise<InventoryResponse>;
    /**
     * Delete a player\'s Inventory Item.
     * @summary Delete Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryDeleteRequest} inventoryDeleteRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventoryItem(projectId: string, playerId: string, playersInventoryItemId: string, inventoryDeleteRequest: InventoryDeleteRequest, configAssignmentHash?: string, options?: any): AxiosPromise<void>;
    /**
     * Get a list of inventory for a player. Results ordered by ascending Player\'s Inventory Item ID. Player\'s Inventory Item ID and Inventory Item ID filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
     * @summary List Player Inventory
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {string} [after] The Player\&#39;s Inventory Item ID after which to retrieve the next page of balances.
     * @param {number} [limit] Number of items to be returned. Defaults to 20.
     * @param {Array<string>} [playersInventoryItemIds] List of Player\&#39;s Inventory Item IDs in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {Array<string>} [inventoryItemIds] List of Inventory IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlayerInventory(projectId: string, playerId: string, configAssignmentHash?: string, after?: string, limit?: number, playersInventoryItemIds?: Array<string>, inventoryItemIds?: Array<string>, options?: any): AxiosPromise<PlayerInventoryResponse>;
    /**
     * Update a player\'s Inventory Item.
     * @summary Update Player\'s Inventory Item
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {string} playersInventoryItemId Player\&#39;s Inventory Item ID of the item to be updated.
     * @param {InventoryRequestUpdate} inventoryRequestUpdate
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventoryItem(projectId: string, playerId: string, playersInventoryItemId: string, inventoryRequestUpdate: InventoryRequestUpdate, configAssignmentHash?: string, options?: any): AxiosPromise<InventoryResponse>;
};
/**
 * Request parameters for addInventoryItem operation in InventoryApi.
 * @export
 * @interface InventoryApiAddInventoryItemRequest
 */
export interface InventoryApiAddInventoryItemRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof InventoryApiAddInventoryItem
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof InventoryApiAddInventoryItem
     */
    readonly playerId: string;
    /**
     *
     * @type {AddInventoryRequest}
     * @memberof InventoryApiAddInventoryItem
     */
    readonly addInventoryRequest: AddInventoryRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof InventoryApiAddInventoryItem
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for deleteInventoryItem operation in InventoryApi.
 * @export
 * @interface InventoryApiDeleteInventoryItemRequest
 */
export interface InventoryApiDeleteInventoryItemRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof InventoryApiDeleteInventoryItem
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof InventoryApiDeleteInventoryItem
     */
    readonly playerId: string;
    /**
     * Player\&#39;s Inventory Item ID of the item to be updated.
     * @type {string}
     * @memberof InventoryApiDeleteInventoryItem
     */
    readonly playersInventoryItemId: string;
    /**
     *
     * @type {InventoryDeleteRequest}
     * @memberof InventoryApiDeleteInventoryItem
     */
    readonly inventoryDeleteRequest: InventoryDeleteRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof InventoryApiDeleteInventoryItem
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for getPlayerInventory operation in InventoryApi.
 * @export
 * @interface InventoryApiGetPlayerInventoryRequest
 */
export interface InventoryApiGetPlayerInventoryRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly playerId: string;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly configAssignmentHash?: string;
    /**
     * The Player\&#39;s Inventory Item ID after which to retrieve the next page of balances.
     * @type {string}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly after?: string;
    /**
     * Number of items to be returned. Defaults to 20.
     * @type {number}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly limit?: number;
    /**
     * List of Player\&#39;s Inventory Item IDs in array notation, for example, &#x60;playersInventoryItemIds[]&#x3D;ID1&amp;playersInventoryItemIds[]&#x3D;ID2&#x60;.
     * @type {Array<string>}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly playersInventoryItemIds?: Array<string>;
    /**
     * List of Inventory IDs in array notation, for example, &#x60;inventoryItemIds[]&#x3D;ID1&amp;inventoryItemIds[]&#x3D;ID2&#x60;.
     * @type {Array<string>}
     * @memberof InventoryApiGetPlayerInventory
     */
    readonly inventoryItemIds?: Array<string>;
}
/**
 * Request parameters for updateInventoryItem operation in InventoryApi.
 * @export
 * @interface InventoryApiUpdateInventoryItemRequest
 */
export interface InventoryApiUpdateInventoryItemRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof InventoryApiUpdateInventoryItem
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof InventoryApiUpdateInventoryItem
     */
    readonly playerId: string;
    /**
     * Player\&#39;s Inventory Item ID of the item to be updated.
     * @type {string}
     * @memberof InventoryApiUpdateInventoryItem
     */
    readonly playersInventoryItemId: string;
    /**
     *
     * @type {InventoryRequestUpdate}
     * @memberof InventoryApiUpdateInventoryItem
     */
    readonly inventoryRequestUpdate: InventoryRequestUpdate;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof InventoryApiUpdateInventoryItem
     */
    readonly configAssignmentHash?: string;
}
/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export declare class InventoryApi extends BaseAPI {
    /**
     * Add an item to a player\'s inventory.
     * @summary Add Inventory Item
     * @param {InventoryApiAddInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    addInventoryItem(requestParameters: InventoryApiAddInventoryItemRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InventoryResponse>>;
    /**
     * Delete a player\'s Inventory Item.
     * @summary Delete Player\'s Inventory Item
     * @param {InventoryApiDeleteInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    deleteInventoryItem(requestParameters: InventoryApiDeleteInventoryItemRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Get a list of inventory for a player. Results ordered by ascending Player\'s Inventory Item ID. Player\'s Inventory Item ID and Inventory Item ID filters are optional, if not given all items will be returned. If both are given an item must match both to be returned.
     * @summary List Player Inventory
     * @param {InventoryApiGetPlayerInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    getPlayerInventory(requestParameters: InventoryApiGetPlayerInventoryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlayerInventoryResponse>>;
    /**
     * Update a player\'s Inventory Item.
     * @summary Update Player\'s Inventory Item
     * @param {InventoryApiUpdateInventoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    updateInventoryItem(requestParameters: InventoryApiUpdateInventoryItemRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InventoryResponse>>;
}
/**
 * PurchasesApi - axios parameter creator
 * @export
 */
export declare const PurchasesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Make a Virtual Purchase for a player.
     * @summary Make Virtual Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeVirtualPurchase: (projectId: string, playerId: string, playerPurchaseVirtualRequest: PlayerPurchaseVirtualRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redeem an Apple App Store purchase for a player.
     * @summary Redeem Apple App Store Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemAppleAppStorePurchase: (projectId: string, playerId: string, playerPurchaseAppleappstoreRequest: PlayerPurchaseAppleappstoreRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redeem a Google Play store purchase for a player.
     * @summary Redeem Google Play Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemGooglePlayPurchase: (projectId: string, playerId: string, playerPurchaseGoogleplaystoreRequest: PlayerPurchaseGoogleplaystoreRequest, configAssignmentHash?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PurchasesApi - functional programming interface
 * @export
 */
export declare const PurchasesApiFp: (configuration?: Configuration) => {
    /**
     * Make a Virtual Purchase for a player.
     * @summary Make Virtual Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeVirtualPurchase(projectId: string, playerId: string, playerPurchaseVirtualRequest: PlayerPurchaseVirtualRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerPurchaseVirtualResponse>>;
    /**
     * Redeem an Apple App Store purchase for a player.
     * @summary Redeem Apple App Store Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemAppleAppStorePurchase(projectId: string, playerId: string, playerPurchaseAppleappstoreRequest: PlayerPurchaseAppleappstoreRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerPurchaseAppleappstoreResponse>>;
    /**
     * Redeem a Google Play store purchase for a player.
     * @summary Redeem Google Play Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemGooglePlayPurchase(projectId: string, playerId: string, playerPurchaseGoogleplaystoreRequest: PlayerPurchaseGoogleplaystoreRequest, configAssignmentHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerPurchaseGoogleplaystoreResponse>>;
};
/**
 * PurchasesApi - factory interface
 * @export
 */
export declare const PurchasesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Make a Virtual Purchase for a player.
     * @summary Make Virtual Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseVirtualRequest} playerPurchaseVirtualRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeVirtualPurchase(projectId: string, playerId: string, playerPurchaseVirtualRequest: PlayerPurchaseVirtualRequest, configAssignmentHash?: string, options?: any): AxiosPromise<PlayerPurchaseVirtualResponse>;
    /**
     * Redeem an Apple App Store purchase for a player.
     * @summary Redeem Apple App Store Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseAppleappstoreRequest} playerPurchaseAppleappstoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemAppleAppStorePurchase(projectId: string, playerId: string, playerPurchaseAppleappstoreRequest: PlayerPurchaseAppleappstoreRequest, configAssignmentHash?: string, options?: any): AxiosPromise<PlayerPurchaseAppleappstoreResponse>;
    /**
     * Redeem a Google Play store purchase for a player.
     * @summary Redeem Google Play Purchase
     * @param {string} projectId ID of the project.
     * @param {string} playerId ID of the player.
     * @param {PlayerPurchaseGoogleplaystoreRequest} playerPurchaseGoogleplaystoreRequest
     * @param {string} [configAssignmentHash] Configuration assignment hash that should be used when processing this request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemGooglePlayPurchase(projectId: string, playerId: string, playerPurchaseGoogleplaystoreRequest: PlayerPurchaseGoogleplaystoreRequest, configAssignmentHash?: string, options?: any): AxiosPromise<PlayerPurchaseGoogleplaystoreResponse>;
};
/**
 * Request parameters for makeVirtualPurchase operation in PurchasesApi.
 * @export
 * @interface PurchasesApiMakeVirtualPurchaseRequest
 */
export interface PurchasesApiMakeVirtualPurchaseRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof PurchasesApiMakeVirtualPurchase
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof PurchasesApiMakeVirtualPurchase
     */
    readonly playerId: string;
    /**
     *
     * @type {PlayerPurchaseVirtualRequest}
     * @memberof PurchasesApiMakeVirtualPurchase
     */
    readonly playerPurchaseVirtualRequest: PlayerPurchaseVirtualRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof PurchasesApiMakeVirtualPurchase
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for redeemAppleAppStorePurchase operation in PurchasesApi.
 * @export
 * @interface PurchasesApiRedeemAppleAppStorePurchaseRequest
 */
export interface PurchasesApiRedeemAppleAppStorePurchaseRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof PurchasesApiRedeemAppleAppStorePurchase
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof PurchasesApiRedeemAppleAppStorePurchase
     */
    readonly playerId: string;
    /**
     *
     * @type {PlayerPurchaseAppleappstoreRequest}
     * @memberof PurchasesApiRedeemAppleAppStorePurchase
     */
    readonly playerPurchaseAppleappstoreRequest: PlayerPurchaseAppleappstoreRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof PurchasesApiRedeemAppleAppStorePurchase
     */
    readonly configAssignmentHash?: string;
}
/**
 * Request parameters for redeemGooglePlayPurchase operation in PurchasesApi.
 * @export
 * @interface PurchasesApiRedeemGooglePlayPurchaseRequest
 */
export interface PurchasesApiRedeemGooglePlayPurchaseRequest {
    /**
     * ID of the project.
     * @type {string}
     * @memberof PurchasesApiRedeemGooglePlayPurchase
     */
    readonly projectId: string;
    /**
     * ID of the player.
     * @type {string}
     * @memberof PurchasesApiRedeemGooglePlayPurchase
     */
    readonly playerId: string;
    /**
     *
     * @type {PlayerPurchaseGoogleplaystoreRequest}
     * @memberof PurchasesApiRedeemGooglePlayPurchase
     */
    readonly playerPurchaseGoogleplaystoreRequest: PlayerPurchaseGoogleplaystoreRequest;
    /**
     * Configuration assignment hash that should be used when processing this request.
     * @type {string}
     * @memberof PurchasesApiRedeemGooglePlayPurchase
     */
    readonly configAssignmentHash?: string;
}
/**
 * PurchasesApi - object-oriented interface
 * @export
 * @class PurchasesApi
 * @extends {BaseAPI}
 */
export declare class PurchasesApi extends BaseAPI {
    /**
     * Make a Virtual Purchase for a player.
     * @summary Make Virtual Purchase
     * @param {PurchasesApiMakeVirtualPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    makeVirtualPurchase(requestParameters: PurchasesApiMakeVirtualPurchaseRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlayerPurchaseVirtualResponse>>;
    /**
     * Redeem an Apple App Store purchase for a player.
     * @summary Redeem Apple App Store Purchase
     * @param {PurchasesApiRedeemAppleAppStorePurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    redeemAppleAppStorePurchase(requestParameters: PurchasesApiRedeemAppleAppStorePurchaseRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlayerPurchaseAppleappstoreResponse>>;
    /**
     * Redeem a Google Play store purchase for a player.
     * @summary Redeem Google Play Purchase
     * @param {PurchasesApiRedeemGooglePlayPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchasesApi
     */
    redeemGooglePlayPurchase(requestParameters: PurchasesApiRedeemGooglePlayPurchaseRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlayerPurchaseGoogleplaystoreResponse>>;
}
