/* tslint:disable */
/* eslint-disable */
/**
 * Economy API
 * # Introduction   This document outlines the API specification for the Economy API.   The Economy service allows the game client to retrieve the game configuration details, perform transactions against the game configuration on the server and maintain a game client \"inventory\" and \"account\". ### Notes about the Beta version   During the Beta period, the information in this document is not guaranteed   to be up-to-date and may change without notice. # Concepts   ## Entities   Economy currently allows interaction with the following Entities:   - Currencies: An entity that when defined contains two parameters, Initial and Max. This dictates how much of this currency a game client is assigned on first interacting with the Economy system. The Max parameter will dictate how much of that currency the Player is allowed to have.     A game client can retrieve and modify their currency balance within the boundaries set on the config.   - Inventory Items: An entity that doesn\'t have any set parameters; it\'s intended use is to indicate the ownership or acquisition of an Item in game e.g. Sword and Shield.     A game client can add or remove an instance of a configured Inventory Item from their personal inventory.   - Virtual Purchases: A transactional entity with the intended use to facilitate a shop or trade feature. Allows the Player to \"buy\" any amount of Items/Currencies for any amount of the same. Only ever uses the previously defined Currencies or Inventory Items.     A game client can redeem a Virtual Purchase and their account will be updated with the \"Rewards\" if the \"Costs\" criteria is met.   The above entities also have an optional Custom Data parameter that can be populated with JSON data from the dashboard to allow bespoke data to be read by game clients.   ## Writelock   The WriteLock is an integer that is automatically incremented serverside whenever a request that changes the stored value of a game clients account or inventory.   The purpose of the WriteLock is to help prevent requests from the same or other game clients happening out-of-sync.   This parameter is optional, but when supplied with a request, will do a comparison with the stored WriteLock on the server, and on mismatch will return an error.   ## Rate Limits   The API has rate limiting in place. Request are limited on a per-player basis up to 60 requests per minute.   The API responds with a `429` HTTP status code if the rate limit is exceeded.   It will also respond with a `Retry-After` header to be used in conjunction with a client\'s retry logic.   The value is the number of seconds until a request for the given player will be accepted.
 *
 * The version of the OpenAPI document: 2.0-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";

export const BASE_PATH = "https://economy.services.api.unity.com".replace(
  /\/+$/,
  ""
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
    let baseOptions = this.configuration.baseOptions || {};
    let headers = baseOptions.headers || {};

    if (process.env.CC_HEADER_UNITY_INSTALLATION_ID) {
      headers["unity-installation-id"] =
        process.env.CC_HEADER_UNITY_INSTALLATION_ID;
    }
    if (process.env.CC_HEADER_ANALYTICS_USER_ID) {
      headers["analytics-user-id"] = process.env.CC_HEADER_ANALYTICS_USER_ID;
    }
    if (process.env.CC_ACCESS_TOKEN && !configuration?.accessToken) {
      this.configuration.accessToken = process.env.CC_ACCESS_TOKEN;
    }
    this.configuration.baseOptions = { ...baseOptions, headers };
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError" = "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}
