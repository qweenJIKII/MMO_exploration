/**
 * Remote Config Delivery API
 * Remote Config Settings Delivery API
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
    playerId?: string;
    projectId?: string;
    environmentId?: string;
    environmentName?: string;
    playerToken?: string;
    serviceToken?: string;
    analyticsUserId?: string;
    unityInstallationId?: string;
    correlationId?: string;
}
export declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    /**
     * @type {string}
     * @memberof Configuration
     */
    playerId?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    projectId?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    environmentId?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    environmentName?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    playerToken?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    serviceToken?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    analyticsUserId?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    unityInstallationId?: string;
    /**
     * @type {string}
     * @memberof Configuration
     */
    correlationId?: string;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}
