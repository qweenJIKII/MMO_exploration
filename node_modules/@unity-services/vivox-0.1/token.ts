import * as CryptoJS from "crypto-js";
import "crypto-js/enc-base64";
import "crypto-js/enc-utf8";

/**
 * @internal
 */
const base64URLEncode = (value: string) => {
  return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(value))
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/\=+$/, "");
};

/**
 * The payload is a base64url-encoded JSON object that contains the claims asserted by the token.
 * You can list claims in the payload in any order.
 *
 * For more information, see the [Vivox Developer Documentation](https://docs.vivox.com/).
 *
 * @export
 * @interface Payload
 */
export interface Payload {
  /**
   * An application-specific issuer.
   *
   * The issuer is provided when you create an aplication on the Vivox Developer portal.
   *
   * e.g. `blindmelon-AppName-dev`
   *
   * @type {string}
   * @memberof Payload
   */
  iss: string;
  /**
   * The expiration time as epoch seconds.
   *
   * This value is usally the current time plus 90 seconds.
   *
   * e.g. `1600349400`
   *
   * @type {number}
   * @memberof Payload
   */
  exp: number;
  /**
   * A Vivox action.
   *
   * For more information see [Supported values for the Vivox action claim](https://docs.vivox.com/v5/general/unity/15_1_160000/en-us/Default.htm#access-token-guide/access-token-format/access-token-payload.htm).
   *
   * e.g. `join`, `join_muted`, `kick`, `login`, `mute`
   *
   * @type {string}
   * @memberof Payload
   */
  vxa: string;
  /**
   * Guarantee token uniqueness.
   *
   * If all other claims are identical, this must be different or the token could be rejected as already used.
   *
   * Note: We recommend that you use an unsigned integer that is increased by 1 for every token that is generated.
   *
   * e.g. `1`
   * @type {number}
   * @memberof Payload
   */
  vxi?: number;
  /**
   * From.
   *
   * This is a user SIP URI that is used in all actions.
   *
   * This is the user who performs actions such as signing in, joining the channel, or muting another user.
   *
   * e.g. `sip:.blindmelon-AppName-dev.beef.@tla.vivox.com`
   *
   * @type {string}
   * @memberof Payload
   */
  f: string;
  /**
   * To.
   *
   * This is a channel SIP URI that is used in join, mute, kick, and transcription actions.
   *
   * This is the channel where the action takes place.
   *
   * e.g. `sip:confctl-g-blindmelon-AppName-dev.testchannel@tla.vivox.com`
   *
   * @type {string}
   * @memberof Payload
   */
  t: string;
  /**
   * The subject.
   *
   * A user SIP URI that is used for mute and kick actions.
   *
   * This is the user who is muted or unmuted, or the user who is kicked.
   *
   * e.g. `sip:.blindmelon-AppName-dev.jerky.@tla.vivox.com`
   *
   * @type {string}
   * @memberof Payload
   */
  sub?: string;
}

/**
 * @export
 * @class TokenApi
 */
export class TokenApi {
  /**
   * Player access to Vivox resources is controlled through Vivox access tokens.
   * Vivox access tokens contain a payload that defines the privileged operation, are signed by the game server by using a token signing key,
   * and are delivered by the client to the Vivox system when the player wants to perform a privileged operation.
   *
   * A Vivox access token is similar to a JSON Web Token, but instead has an empty access token header.
   *
   * Access tokens have the following characteristics:
   *   - You can only use a token once. After you use a token for the privileged operation, it cannot be reused.
   *   - Tokens expire even if they are never used. You cannot use a token cannot after the expiration time that is set by the token issuer.
   *
   * Game clients require access tokens to perform operations in the Vivox system.
   *
   *   - **Game client-generated tokens** - use for prototyping or testing purposes
   *   - **Secure game server-generated tokens** - use for the secure deployment of a production game and to avoid token errors due to user time settings
   *
   * Note that before either a client or a server can generate a token, you need a token issuer and a token signing key.
   * For more information, see [Where do I find my custom application credentials?](https://support.vivox.com/hc/en-us/articles/360025908614) in the Vivox Developer Support Portal.
   *
   * @summary Generates and returns a Vivox access token.
   * @param {string} key The Vivox key to sign the token with
   * @param {Payload} payload The payload of the token
   * @returns {string}
   */
  public static generateVivoxToken(key: string, payload: Payload): string {
    const base64urlHeader = base64URLEncode("{}");
    // Encode payload
    const base64urlPayload = base64URLEncode(JSON.stringify(payload));

    // Join segments to prepare for signing
    const segments = [base64urlHeader, base64urlPayload];
    const toSign = segments.join(".");
    const keyToBits = CryptoJS.enc.Utf8.parse(key);

    // Sign token with key and SHA-256
    const base64urlSigned = CryptoJS.HmacSHA256(toSign, keyToBits)
      .toString(CryptoJS.enc.Base64)
      .replace(/\+/g, "-")
      .replace(/\//g, "_")
      .replace(/\=+$/, "");

    segments.push(base64urlSigned);

    return segments.join(".");
  }
}
