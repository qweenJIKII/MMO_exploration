"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenApi = void 0;
var CryptoJS = require("crypto-js");
require("crypto-js/enc-base64");
require("crypto-js/enc-utf8");
/**
 * @internal
 */
var base64URLEncode = function (value) {
    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(value))
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/\=+$/, "");
};
/**
 * @export
 * @class TokenApi
 */
var TokenApi = /** @class */ (function () {
    function TokenApi() {
    }
    /**
     * Player access to Vivox resources is controlled through Vivox access tokens.
     * Vivox access tokens contain a payload that defines the privileged operation, are signed by the game server by using a token signing key,
     * and are delivered by the client to the Vivox system when the player wants to perform a privileged operation.
     *
     * A Vivox access token is similar to a JSON Web Token, but instead has an empty access token header.
     *
     * Access tokens have the following characteristics:
     *   - You can only use a token once. After you use a token for the privileged operation, it cannot be reused.
     *   - Tokens expire even if they are never used. You cannot use a token cannot after the expiration time that is set by the token issuer.
     *
     * Game clients require access tokens to perform operations in the Vivox system.
     *
     *   - **Game client-generated tokens** - use for prototyping or testing purposes
     *   - **Secure game server-generated tokens** - use for the secure deployment of a production game and to avoid token errors due to user time settings
     *
     * Note that before either a client or a server can generate a token, you need a token issuer and a token signing key.
     * For more information, see [Where do I find my custom application credentials?](https://support.vivox.com/hc/en-us/articles/360025908614) in the Vivox Developer Support Portal.
     *
     * @summary Generates and returns a Vivox access token.
     * @param {string} key The Vivox key to sign the token with
     * @param {Payload} payload The payload of the token
     * @returns {string}
     */
    TokenApi.generateVivoxToken = function (key, payload) {
        var base64urlHeader = base64URLEncode("{}");
        // Encode payload
        var base64urlPayload = base64URLEncode(JSON.stringify(payload));
        // Join segments to prepare for signing
        var segments = [base64urlHeader, base64urlPayload];
        var toSign = segments.join(".");
        var keyToBits = CryptoJS.enc.Utf8.parse(key);
        // Sign token with key and SHA-256
        var base64urlSigned = CryptoJS.HmacSHA256(toSign, keyToBits)
            .toString(CryptoJS.enc.Base64)
            .replace(/\+/g, "-")
            .replace(/\//g, "_")
            .replace(/\=+$/, "");
        segments.push(base64urlSigned);
        return segments.join(".");
    };
    return TokenApi;
}());
exports.TokenApi = TokenApi;
