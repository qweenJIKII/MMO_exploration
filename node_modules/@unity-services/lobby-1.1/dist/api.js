"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Lobby
 * The Lobby service is a flexible system for games to enable different styles of multiplayer experiences quickly and easily.  A lobby provides a way to browse and join public games, create private games that can be easily joined by others using a code, gather a group together in a party before matchmaking as a group, and more!
 *
 * The version of the OpenAPI document: v1
 * Contact: multiplayer-suite-devs@unity3d.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LobbyApi = exports.LobbyApiFactory = exports.LobbyApiFp = exports.LobbyApiAxiosParamCreator = exports.TokenRequestTokenTypeEnum = exports.QueryOrderFieldEnum = exports.QueryFilterOpEnum = exports.QueryFilterFieldEnum = exports.PlayerDataObjectVisibilityEnum = exports.DataObjectIndexEnum = exports.DataObjectVisibilityEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.DataObjectVisibilityEnum = {
    Public: "public",
    Member: "member",
    Private: "private",
};
exports.DataObjectIndexEnum = {
    S1: "S1",
    S2: "S2",
    S3: "S3",
    S4: "S4",
    S5: "S5",
    N1: "N1",
    N2: "N2",
    N3: "N3",
    N4: "N4",
    N5: "N5",
};
exports.PlayerDataObjectVisibilityEnum = {
    Public: "public",
    Member: "member",
    Private: "private",
};
exports.QueryFilterFieldEnum = {
    MaxPlayers: "MaxPlayers",
    AvailableSlots: "AvailableSlots",
    Name: "Name",
    Created: "Created",
    LastUpdated: "LastUpdated",
    S1: "S1",
    S2: "S2",
    S3: "S3",
    S4: "S4",
    S5: "S5",
    N1: "N1",
    N2: "N2",
    N3: "N3",
    N4: "N4",
    N5: "N5",
    IsLocked: "IsLocked",
};
exports.QueryFilterOpEnum = {
    Contains: "CONTAINS",
    Eq: "EQ",
    Ne: "NE",
    Lt: "LT",
    Le: "LE",
    Gt: "GT",
    Ge: "GE",
};
exports.QueryOrderFieldEnum = {
    Name: "Name",
    MaxPlayers: "MaxPlayers",
    AvailableSlots: "AvailableSlots",
    Created: "Created",
    LastUpdated: "LastUpdated",
    Id: "ID",
    S1: "S1",
    S2: "S2",
    S3: "S3",
    S4: "S4",
    S5: "S5",
    N1: "N1",
    N2: "N2",
    N3: "N3",
    N4: "N4",
    N5: "N5",
};
exports.TokenRequestTokenTypeEnum = {
    VivoxJoin: "vivoxJoin",
    WireJoin: "wireJoin",
};
/**
 * LobbyApi - axios parameter creator
 * @export
 */
exports.LobbyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new lobby and return the lobby metadata.
         * @summary Create a lobby
         * @param {CreateRequest} [createRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLobby: function (createRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/create";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a lobby so it\'s no longer discoverable/joinable.
         * @summary Delete a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLobby: function (lobbyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("deleteLobby", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of lobby IDs that the player is currently a member of.
         * @summary Get a player\'s joined lobbies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinedLobbies: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/joined";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the full details for a lobby including the game-specific metadata and player details.
         * @summary Get lobby details
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLobby: function (lobbyId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("getLobby", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Heartbeat a lobby, updating its `LastUpdated` property, to signify that the lobby is not stale.
         * @summary Heartbeat a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeat: function (lobbyId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("heartbeat", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}/heartbeat".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Join an existing lobby using the lobby code if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby code
         * @param {JoinByCodeRequest} [joinByCodeRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyByCode: function (joinByCodeRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/joinbycode";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(joinByCodeRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Join an existing lobby using the lobby ID if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby ID
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Player} [player]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyById: function (lobbyId, player, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("joinLobbyById", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}/join".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(player, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query all of the public lobbies for a title and filter them down according to parameters provided by the client.
         * @summary Query public lobbies
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLobbies: function (queryRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/query";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(queryRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Query all of the available lobbies for a title and filter them down according to parameters provided by the client.  If possible, join one and return its information.
         * @summary Query available lobbies and join a random one
         * @param {QuickJoinRequest} [quickJoinRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickJoinLobby: function (quickJoinRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/quickjoin";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(quickJoinRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Reconnect a disconnected player to a lobby using the lobby ID.
         * @summary Reconnect to a lobby after disconnecting
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconnect: function (lobbyId, body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("reconnect", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}/reconnect".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove an individual player from a lobby.  If the player being removed is the host, a random player is chosen as the new host.  Hosts can avoid this by changing the `hostId` to another player using the **Update Lobby** API before leaving.
         * @summary Remove a player
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePlayer: function (lobbyId, playerId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("removePlayer", "lobbyId", lobbyId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("removePlayer", "playerId", playerId);
                            localVarPath = "/{lobbyId}/players/{playerId}"
                                .replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "DELETE" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Request authentication tokens for use with other services that interact with Lobby.
         * @summary Authentication token request
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Array<TokenRequest>} tokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTokens: function (lobbyId, tokenRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("requestTokens", "lobbyId", lobbyId);
                            // verify required parameter 'tokenRequest' is not null or undefined
                            common_1.assertParamExists("requestTokens", "tokenRequest", tokenRequest);
                            localVarPath = "/{lobbyId}/tokens".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(tokenRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the properties of a lobby.  This could include the lobby name, number of max players, the lobby\'s `data` property, etc.
         * @summary Update lobby data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {UpdateRequest} [updateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLobby: function (lobbyId, updateRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("updateLobby", "lobbyId", lobbyId);
                            localVarPath = "/{lobbyId}".replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the properties of a player.  Only the player matching the player ID can perform this action.  This could include updating the `data` property for an individual player to include game-specific metadata.  The index data property is not allowed on player data objects at this time.
         * @summary Update player data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {PlayerUpdateRequest} [playerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: function (lobbyId, playerId, playerUpdateRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'lobbyId' is not null or undefined
                            common_1.assertParamExists("updatePlayer", "lobbyId", lobbyId);
                            // verify required parameter 'playerId' is not null or undefined
                            common_1.assertParamExists("updatePlayer", "playerId", playerId);
                            localVarPath = "/{lobbyId}/players/{playerId}"
                                .replace("{" + "lobbyId" + "}", encodeURIComponent(String(lobbyId)))
                                .replace("{" + "playerId" + "}", encodeURIComponent(String(playerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication JWT required
                            // http bearer authentication required
                            return [4 /*yield*/, common_1.setBearerAuthToObject(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication JWT required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter["Content-Type"] = "application/json";
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(playerUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * LobbyApi - functional programming interface
 * @export
 */
exports.LobbyApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.LobbyApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new lobby and return the lobby metadata.
         * @summary Create a lobby
         * @param {CreateRequest} [createRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLobby: function (createRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createLobby(createRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a lobby so it\'s no longer discoverable/joinable.
         * @summary Delete a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLobby: function (lobbyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLobby(lobbyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of lobby IDs that the player is currently a member of.
         * @summary Get a player\'s joined lobbies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinedLobbies: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getJoinedLobbies(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the full details for a lobby including the game-specific metadata and player details.
         * @summary Get lobby details
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLobby: function (lobbyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLobby(lobbyId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Heartbeat a lobby, updating its `LastUpdated` property, to signify that the lobby is not stale.
         * @summary Heartbeat a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeat: function (lobbyId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.heartbeat(lobbyId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Join an existing lobby using the lobby code if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby code
         * @param {JoinByCodeRequest} [joinByCodeRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyByCode: function (joinByCodeRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.joinLobbyByCode(joinByCodeRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Join an existing lobby using the lobby ID if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby ID
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Player} [player]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyById: function (lobbyId, player, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.joinLobbyById(lobbyId, player, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query all of the public lobbies for a title and filter them down according to parameters provided by the client.
         * @summary Query public lobbies
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLobbies: function (queryRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryLobbies(queryRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query all of the available lobbies for a title and filter them down according to parameters provided by the client.  If possible, join one and return its information.
         * @summary Query available lobbies and join a random one
         * @param {QuickJoinRequest} [quickJoinRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickJoinLobby: function (quickJoinRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quickJoinLobby(quickJoinRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Reconnect a disconnected player to a lobby using the lobby ID.
         * @summary Reconnect to a lobby after disconnecting
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconnect: function (lobbyId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reconnect(lobbyId, body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove an individual player from a lobby.  If the player being removed is the host, a random player is chosen as the new host.  Hosts can avoid this by changing the `hostId` to another player using the **Update Lobby** API before leaving.
         * @summary Remove a player
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePlayer: function (lobbyId, playerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.removePlayer(lobbyId, playerId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Request authentication tokens for use with other services that interact with Lobby.
         * @summary Authentication token request
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Array<TokenRequest>} tokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTokens: function (lobbyId, tokenRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.requestTokens(lobbyId, tokenRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the properties of a lobby.  This could include the lobby name, number of max players, the lobby\'s `data` property, etc.
         * @summary Update lobby data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {UpdateRequest} [updateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLobby: function (lobbyId, updateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLobby(lobbyId, updateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the properties of a player.  Only the player matching the player ID can perform this action.  This could include updating the `data` property for an individual player to include game-specific metadata.  The index data property is not allowed on player data objects at this time.
         * @summary Update player data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {PlayerUpdateRequest} [playerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: function (lobbyId, playerId, playerUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePlayer(lobbyId, playerId, playerUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LobbyApi - factory interface
 * @export
 */
exports.LobbyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.LobbyApiFp(configuration);
    return {
        /**
         * Create a new lobby and return the lobby metadata.
         * @summary Create a lobby
         * @param {CreateRequest} [createRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLobby: function (createRequest, options) {
            return localVarFp
                .createLobby(createRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a lobby so it\'s no longer discoverable/joinable.
         * @summary Delete a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLobby: function (lobbyId, options) {
            return localVarFp
                .deleteLobby(lobbyId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of lobby IDs that the player is currently a member of.
         * @summary Get a player\'s joined lobbies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinedLobbies: function (options) {
            return localVarFp
                .getJoinedLobbies(options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the full details for a lobby including the game-specific metadata and player details.
         * @summary Get lobby details
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLobby: function (lobbyId, options) {
            return localVarFp
                .getLobby(lobbyId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Heartbeat a lobby, updating its `LastUpdated` property, to signify that the lobby is not stale.
         * @summary Heartbeat a lobby
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeat: function (lobbyId, body, options) {
            return localVarFp
                .heartbeat(lobbyId, body, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Join an existing lobby using the lobby code if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby code
         * @param {JoinByCodeRequest} [joinByCodeRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyByCode: function (joinByCodeRequest, options) {
            return localVarFp
                .joinLobbyByCode(joinByCodeRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Join an existing lobby using the lobby ID if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
         * @summary Join a lobby with lobby ID
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Player} [player]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinLobbyById: function (lobbyId, player, options) {
            return localVarFp
                .joinLobbyById(lobbyId, player, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query all of the public lobbies for a title and filter them down according to parameters provided by the client.
         * @summary Query public lobbies
         * @param {QueryRequest} [queryRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryLobbies: function (queryRequest, options) {
            return localVarFp
                .queryLobbies(queryRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query all of the available lobbies for a title and filter them down according to parameters provided by the client.  If possible, join one and return its information.
         * @summary Query available lobbies and join a random one
         * @param {QuickJoinRequest} [quickJoinRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickJoinLobby: function (quickJoinRequest, options) {
            return localVarFp
                .quickJoinLobby(quickJoinRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Reconnect a disconnected player to a lobby using the lobby ID.
         * @summary Reconnect to a lobby after disconnecting
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconnect: function (lobbyId, body, options) {
            return localVarFp
                .reconnect(lobbyId, body, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove an individual player from a lobby.  If the player being removed is the host, a random player is chosen as the new host.  Hosts can avoid this by changing the `hostId` to another player using the **Update Lobby** API before leaving.
         * @summary Remove a player
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePlayer: function (lobbyId, playerId, options) {
            return localVarFp
                .removePlayer(lobbyId, playerId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Request authentication tokens for use with other services that interact with Lobby.
         * @summary Authentication token request
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {Array<TokenRequest>} tokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTokens: function (lobbyId, tokenRequest, options) {
            return localVarFp
                .requestTokens(lobbyId, tokenRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the properties of a lobby.  This could include the lobby name, number of max players, the lobby\'s `data` property, etc.
         * @summary Update lobby data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {UpdateRequest} [updateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLobby: function (lobbyId, updateRequest, options) {
            return localVarFp
                .updateLobby(lobbyId, updateRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the properties of a player.  Only the player matching the player ID can perform this action.  This could include updating the `data` property for an individual player to include game-specific metadata.  The index data property is not allowed on player data objects at this time.
         * @summary Update player data
         * @param {string} lobbyId The ID of the lobby to execute the request against.
         * @param {string} playerId The ID of the player to execute the request against.
         * @param {PlayerUpdateRequest} [playerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: function (lobbyId, playerId, playerUpdateRequest, options) {
            return localVarFp
                .updatePlayer(lobbyId, playerId, playerUpdateRequest, options)
                .then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LobbyApi - object-oriented interface
 * @export
 * @class LobbyApi
 * @extends {BaseAPI}
 */
var LobbyApi = /** @class */ (function (_super) {
    __extends(LobbyApi, _super);
    function LobbyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new lobby and return the lobby metadata.
     * @summary Create a lobby
     * @param {CreateRequest} [createRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.createLobby = function (createRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .createLobby(createRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a lobby so it\'s no longer discoverable/joinable.
     * @summary Delete a lobby
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.deleteLobby = function (lobbyId, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .deleteLobby(lobbyId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of lobby IDs that the player is currently a member of.
     * @summary Get a player\'s joined lobbies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.getJoinedLobbies = function (options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .getJoinedLobbies(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the full details for a lobby including the game-specific metadata and player details.
     * @summary Get lobby details
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.getLobby = function (lobbyId, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .getLobby(lobbyId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Heartbeat a lobby, updating its `LastUpdated` property, to signify that the lobby is not stale.
     * @summary Heartbeat a lobby
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.heartbeat = function (lobbyId, body, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .heartbeat(lobbyId, body, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Join an existing lobby using the lobby code if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
     * @summary Join a lobby with lobby code
     * @param {JoinByCodeRequest} [joinByCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.joinLobbyByCode = function (joinByCodeRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .joinLobbyByCode(joinByCodeRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Join an existing lobby using the lobby ID if there is space available (i.e. total number of players is less than the value of `MaxPlayers`).
     * @summary Join a lobby with lobby ID
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {Player} [player]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.joinLobbyById = function (lobbyId, player, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .joinLobbyById(lobbyId, player, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query all of the public lobbies for a title and filter them down according to parameters provided by the client.
     * @summary Query public lobbies
     * @param {QueryRequest} [queryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.queryLobbies = function (queryRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .queryLobbies(queryRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query all of the available lobbies for a title and filter them down according to parameters provided by the client.  If possible, join one and return its information.
     * @summary Query available lobbies and join a random one
     * @param {QuickJoinRequest} [quickJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.quickJoinLobby = function (quickJoinRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .quickJoinLobby(quickJoinRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Reconnect a disconnected player to a lobby using the lobby ID.
     * @summary Reconnect to a lobby after disconnecting
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.reconnect = function (lobbyId, body, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .reconnect(lobbyId, body, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove an individual player from a lobby.  If the player being removed is the host, a random player is chosen as the new host.  Hosts can avoid this by changing the `hostId` to another player using the **Update Lobby** API before leaving.
     * @summary Remove a player
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {string} playerId The ID of the player to execute the request against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.removePlayer = function (lobbyId, playerId, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .removePlayer(lobbyId, playerId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Request authentication tokens for use with other services that interact with Lobby.
     * @summary Authentication token request
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {Array<TokenRequest>} tokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.requestTokens = function (lobbyId, tokenRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .requestTokens(lobbyId, tokenRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the properties of a lobby.  This could include the lobby name, number of max players, the lobby\'s `data` property, etc.
     * @summary Update lobby data
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {UpdateRequest} [updateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.updateLobby = function (lobbyId, updateRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .updateLobby(lobbyId, updateRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the properties of a player.  Only the player matching the player ID can perform this action.  This could include updating the `data` property for an individual player to include game-specific metadata.  The index data property is not allowed on player data objects at this time.
     * @summary Update player data
     * @param {string} lobbyId The ID of the lobby to execute the request against.
     * @param {string} playerId The ID of the player to execute the request against.
     * @param {PlayerUpdateRequest} [playerUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LobbyApi
     */
    LobbyApi.prototype.updatePlayer = function (lobbyId, playerId, playerUpdateRequest, options) {
        var _this = this;
        return exports.LobbyApiFp(this.configuration)
            .updatePlayer(lobbyId, playerId, playerUpdateRequest, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LobbyApi;
}(base_1.BaseAPI));
exports.LobbyApi = LobbyApi;
